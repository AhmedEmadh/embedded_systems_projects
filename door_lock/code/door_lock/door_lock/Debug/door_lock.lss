
door_lock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  000016d4  00001768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000041  008000ca  008000ca  000017d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001804  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000408  00000000  00000000  00001840  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b93  00000000  00000000  00001c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000119f  00000000  00000000  000057db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000034fa  00000000  00000000  0000697a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bc0  00000000  00000000  00009e74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015cd  00000000  00000000  0000aa34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003d20  00000000  00000000  0000c001  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b8  00000000  00000000  0000fd21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__vector_1>
       8:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__vector_2>
       c:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__vector_3>
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <__vector_7>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__vector_11>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <__vector_16>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      54:	52 03       	mulsu	r21, r18
      56:	57 03       	mulsu	r21, r23
      58:	5c 03       	fmul	r21, r20
      5a:	61 03       	mulsu	r22, r17
      5c:	66 03       	mulsu	r22, r22
      5e:	6b 03       	fmul	r22, r19
      60:	70 03       	mulsu	r23, r16
      62:	75 03       	mulsu	r23, r21
      64:	86 03       	fmuls	r16, r22
      66:	8b 03       	fmulsu	r16, r19
      68:	90 03       	fmuls	r17, r16
      6a:	95 03       	fmuls	r17, r21
      6c:	9a 03       	fmulsu	r17, r18
      6e:	9f 03       	fmulsu	r17, r23
      70:	a4 03       	fmuls	r18, r20
      72:	a9 03       	fmulsu	r18, r17
      74:	ba 03       	fmulsu	r19, r18
      76:	bf 03       	fmulsu	r19, r23
      78:	c4 03       	fmuls	r20, r20
      7a:	c9 03       	fmulsu	r20, r17
      7c:	ce 03       	fmulsu	r20, r22
      7e:	d3 03       	fmuls	r21, r19
      80:	d8 03       	fmulsu	r21, r16
      82:	dd 03       	fmulsu	r21, r21
      84:	ee 03       	fmulsu	r22, r22
      86:	f3 03       	fmuls	r23, r19
      88:	f8 03       	fmulsu	r23, r16
      8a:	fd 03       	fmulsu	r23, r21
      8c:	02 04       	cpc	r0, r2
      8e:	07 04       	cpc	r0, r7
      90:	0c 04       	cpc	r0, r12
      92:	11 04       	cpc	r1, r1
      94:	30 04       	cpc	r3, r0
      96:	35 04       	cpc	r3, r5
      98:	3a 04       	cpc	r3, r10
      9a:	3f 04       	cpc	r3, r15
      9c:	44 04       	cpc	r4, r4
      9e:	49 04       	cpc	r4, r9
      a0:	4e 04       	cpc	r4, r14
      a2:	53 04       	cpc	r5, r3
      a4:	64 04       	cpc	r6, r4
      a6:	69 04       	cpc	r6, r9
      a8:	6e 04       	cpc	r6, r14
      aa:	73 04       	cpc	r7, r3
      ac:	78 04       	cpc	r7, r8
      ae:	7d 04       	cpc	r7, r13
      b0:	82 04       	cpc	r8, r2
      b2:	87 04       	cpc	r8, r7
      b4:	98 04       	cpc	r9, r8
      b6:	9d 04       	cpc	r9, r13
      b8:	a2 04       	cpc	r10, r2
      ba:	a7 04       	cpc	r10, r7
      bc:	ac 04       	cpc	r10, r12
      be:	b1 04       	cpc	r11, r1
      c0:	b6 04       	cpc	r11, r6
      c2:	bb 04       	cpc	r11, r11
      c4:	cc 04       	cpc	r12, r12
      c6:	d1 04       	cpc	r13, r1
      c8:	d6 04       	cpc	r13, r6
      ca:	db 04       	cpc	r13, r11
      cc:	e0 04       	cpc	r14, r0
      ce:	e5 04       	cpc	r14, r5
      d0:	ea 04       	cpc	r14, r10
      d2:	ef 04       	cpc	r14, r15
      d4:	1c 05       	cpc	r17, r12
      d6:	3f 05       	cpc	r19, r15
      d8:	66 05       	cpc	r22, r6
      da:	91 05       	cpc	r25, r1
      dc:	bc 05       	cpc	r27, r12
      de:	e3 05       	cpc	r30, r3
      e0:	0e 06       	cpc	r0, r30
      e2:	39 06       	cpc	r3, r25

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf e5       	ldi	r28, 0x5F	; 95
      ea:	d8 e0       	ldi	r29, 0x08	; 8
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	10 e0       	ldi	r17, 0x00	; 0
      f2:	a0 e6       	ldi	r26, 0x60	; 96
      f4:	b0 e0       	ldi	r27, 0x00	; 0
      f6:	e4 ed       	ldi	r30, 0xD4	; 212
      f8:	f6 e1       	ldi	r31, 0x16	; 22
      fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0
     100:	aa 3c       	cpi	r26, 0xCA	; 202
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
     106:	21 e0       	ldi	r18, 0x01	; 1
     108:	aa ec       	ldi	r26, 0xCA	; 202
     10a:	b0 e0       	ldi	r27, 0x00	; 0
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	ab 30       	cpi	r26, 0x0B	; 11
     112:	b2 07       	cpc	r27, r18
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 93 02 	call	0x526	; 0x526 <main>
     11a:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <DCM_voidTurnRight>:
#include "DCM_private.h"
#include "DCM_config.h"
#include "DCM_interface.h"

void DCM_voidTurnRight(){
	DIO_u8SetPinValue(DCM_u8_PORT,DCM_u8_IN1_PIN,DIO_u8_HIGH);
     122:	41 e0       	ldi	r20, 0x01	; 1
     124:	69 e0       	ldi	r22, 0x09	; 9
     126:	88 e0       	ldi	r24, 0x08	; 8
     128:	0e 94 32 03 	call	0x664	; 0x664 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DCM_u8_PORT,DCM_u8_IN2_PIN,DIO_u8_LOW);
     12c:	40 e0       	ldi	r20, 0x00	; 0
     12e:	6a e0       	ldi	r22, 0x0A	; 10
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	0e 94 32 03 	call	0x664	; 0x664 <DIO_u8SetPinValue>
     136:	08 95       	ret

00000138 <DCM_voidTurnLeft>:
}
void DCM_voidTurnLeft(){
	DIO_u8SetPinValue(DCM_u8_PORT,DCM_u8_IN1_PIN,DIO_u8_LOW);
     138:	40 e0       	ldi	r20, 0x00	; 0
     13a:	69 e0       	ldi	r22, 0x09	; 9
     13c:	88 e0       	ldi	r24, 0x08	; 8
     13e:	0e 94 32 03 	call	0x664	; 0x664 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DCM_u8_PORT,DCM_u8_IN2_PIN,DIO_u8_HIGH);
     142:	41 e0       	ldi	r20, 0x01	; 1
     144:	6a e0       	ldi	r22, 0x0A	; 10
     146:	88 e0       	ldi	r24, 0x08	; 8
     148:	0e 94 32 03 	call	0x664	; 0x664 <DIO_u8SetPinValue>
     14c:	08 95       	ret

0000014e <DCM_voidTurnOff>:
}
void DCM_voidTurnOff(){
	DIO_u8SetPinValue(DCM_u8_PORT,DCM_u8_IN1_PIN,DIO_u8_LOW);
     14e:	40 e0       	ldi	r20, 0x00	; 0
     150:	69 e0       	ldi	r22, 0x09	; 9
     152:	88 e0       	ldi	r24, 0x08	; 8
     154:	0e 94 32 03 	call	0x664	; 0x664 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DCM_u8_PORT,DCM_u8_IN2_PIN,DIO_u8_LOW);
     158:	40 e0       	ldi	r20, 0x00	; 0
     15a:	6a e0       	ldi	r22, 0x0A	; 10
     15c:	88 e0       	ldi	r24, 0x08	; 8
     15e:	0e 94 32 03 	call	0x664	; 0x664 <DIO_u8SetPinValue>
     162:	08 95       	ret

00000164 <KPD_u8GetKeyStatus>:

/* Output rows pins */
u8 KPD_Au8Rows[KPD_u8_NUMBER_OF_ROWS] = KPD_ROWS;
/* Input columns pins */
u8 KPD_Au8Colomns[KPD_u8_NUMBER_OF_COLS] = KPD_COLS;
u8 KPD_u8GetKeyStatus(u8 * Copy_pu8Returnedkey){
     164:	9f 92       	push	r9
     166:	af 92       	push	r10
     168:	bf 92       	push	r11
     16a:	cf 92       	push	r12
     16c:	df 92       	push	r13
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
     172:	0f 93       	push	r16
     174:	1f 93       	push	r17
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	1f 92       	push	r1
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ErrorState = STD_TYPES_OK;
	u8 Local_u8CounterRow = 0;
	u8 Local_u8CounterColomn = 0;
	u8 Local_u8ReadKeyFlag = 0;
	u8 Local_u8ColomnPinValue = 0;
     180:	19 82       	std	Y+1, r1	; 0x01
	/* check input arguments */
	if(Copy_pu8Returnedkey != NULL){
     182:	00 97       	sbiw	r24, 0x00	; 0
     184:	09 f0       	breq	.+2      	; 0x188 <KPD_u8GetKeyStatus+0x24>
     186:	4a c0       	rjmp	.+148    	; 0x21c <KPD_u8GetKeyStatus+0xb8>
		}
		/* if exited loop and no key is pressed */
		if(Local_u8ReadKeyFlag == 0)
			*Copy_pu8Returnedkey = KPD_u8_Key_Not_Pressed;
	}else{
		Local_u8ErrorState = STD_TYPES_NOK;
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	56 c0       	rjmp	.+172    	; 0x238 <KPD_u8GetKeyStatus+0xd4>
	/* check input arguments */
	if(Copy_pu8Returnedkey != NULL){
		/* Activate all rows (LOW) */
		for(Local_u8CounterRow = 0; Local_u8CounterRow < 4; Local_u8CounterRow++){
			/* activate row (LOW) */
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8Rows[Local_u8CounterRow],DIO_u8_LOW);
     18c:	c0 2e       	mov	r12, r16
     18e:	d1 2c       	mov	r13, r1
     190:	f6 01       	movw	r30, r12
     192:	ec 59       	subi	r30, 0x9C	; 156
     194:	ff 4f       	sbci	r31, 0xFF	; 255
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	60 81       	ld	r22, Z
     19a:	86 e0       	ldi	r24, 0x06	; 6
     19c:	0e 94 32 03 	call	0x664	; 0x664 <DIO_u8SetPinValue>
			/* test all columns (LOW) */
			for(Local_u8CounterColomn=0;Local_u8CounterColomn<4;Local_u8CounterColomn++){
     1a0:	10 e0       	ldi	r17, 0x00	; 0
     1a2:	2d c0       	rjmp	.+90     	; 0x1fe <KPD_u8GetKeyStatus+0x9a>
				/* Read Pin Value (LOW) */
				DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8Colomns[Local_u8CounterColomn],&Local_u8ColomnPinValue);
     1a4:	e1 2e       	mov	r14, r17
     1a6:	f1 2c       	mov	r15, r1
     1a8:	f7 01       	movw	r30, r14
     1aa:	e0 5a       	subi	r30, 0xA0	; 160
     1ac:	ff 4f       	sbci	r31, 0xFF	; 255
     1ae:	ae 01       	movw	r20, r28
     1b0:	4f 5f       	subi	r20, 0xFF	; 255
     1b2:	5f 4f       	sbci	r21, 0xFF	; 255
     1b4:	60 81       	ld	r22, Z
     1b6:	86 e0       	ldi	r24, 0x06	; 6
     1b8:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_u8GetPinValue>
				if(Local_u8ColomnPinValue == DIO_u8_LOW){
     1bc:	99 81       	ldd	r25, Y+1	; 0x01
     1be:	91 11       	cpse	r25, r1
     1c0:	1d c0       	rjmp	.+58     	; 0x1fc <KPD_u8GetKeyStatus+0x98>
					/* store returned key */
					*Copy_pu8Returnedkey = KPD_Au8keys[Local_u8CounterRow][Local_u8CounterColomn];
     1c2:	f6 01       	movw	r30, r12
     1c4:	ee 0f       	add	r30, r30
     1c6:	ff 1f       	adc	r31, r31
     1c8:	ee 0f       	add	r30, r30
     1ca:	ff 1f       	adc	r31, r31
     1cc:	e8 59       	subi	r30, 0x98	; 152
     1ce:	ff 4f       	sbci	r31, 0xFF	; 255
     1d0:	ee 0d       	add	r30, r14
     1d2:	ff 1d       	adc	r31, r15
     1d4:	80 81       	ld	r24, Z
     1d6:	f5 01       	movw	r30, r10
     1d8:	80 83       	st	Z, r24
					/* wait until the key is up */
					while(Local_u8ColomnPinValue == DIO_u8_LOW){
     1da:	0a c0       	rjmp	.+20     	; 0x1f0 <KPD_u8GetKeyStatus+0x8c>
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8Colomns[Local_u8CounterColomn],&Local_u8ColomnPinValue);
     1dc:	ae 01       	movw	r20, r28
     1de:	4f 5f       	subi	r20, 0xFF	; 255
     1e0:	5f 4f       	sbci	r21, 0xFF	; 255
     1e2:	f7 01       	movw	r30, r14
     1e4:	e0 5a       	subi	r30, 0xA0	; 160
     1e6:	ff 4f       	sbci	r31, 0xFF	; 255
     1e8:	60 81       	ld	r22, Z
     1ea:	86 e0       	ldi	r24, 0x06	; 6
     1ec:	0e 94 0a 05 	call	0xa14	; 0xa14 <DIO_u8GetPinValue>
				DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8Colomns[Local_u8CounterColomn],&Local_u8ColomnPinValue);
				if(Local_u8ColomnPinValue == DIO_u8_LOW){
					/* store returned key */
					*Copy_pu8Returnedkey = KPD_Au8keys[Local_u8CounterRow][Local_u8CounterColomn];
					/* wait until the key is up */
					while(Local_u8ColomnPinValue == DIO_u8_LOW){
     1f0:	89 81       	ldd	r24, Y+1	; 0x01
     1f2:	88 23       	and	r24, r24
     1f4:	99 f3       	breq	.-26     	; 0x1dc <KPD_u8GetKeyStatus+0x78>
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8Colomns[Local_u8CounterColomn],&Local_u8ColomnPinValue);
					}
					/* set the flag */
					Local_u8ReadKeyFlag = 1;
     1f6:	99 24       	eor	r9, r9
     1f8:	93 94       	inc	r9
     1fa:	03 c0       	rjmp	.+6      	; 0x202 <KPD_u8GetKeyStatus+0x9e>
		/* Activate all rows (LOW) */
		for(Local_u8CounterRow = 0; Local_u8CounterRow < 4; Local_u8CounterRow++){
			/* activate row (LOW) */
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8Rows[Local_u8CounterRow],DIO_u8_LOW);
			/* test all columns (LOW) */
			for(Local_u8CounterColomn=0;Local_u8CounterColomn<4;Local_u8CounterColomn++){
     1fc:	1f 5f       	subi	r17, 0xFF	; 255
     1fe:	14 30       	cpi	r17, 0x04	; 4
     200:	88 f2       	brcs	.-94     	; 0x1a4 <KPD_u8GetKeyStatus+0x40>
					Local_u8ReadKeyFlag = 1;
					break;
				}
			}
			/* deactivate the row (HIGH)*/
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8Rows[Local_u8CounterRow],DIO_u8_HIGH);
     202:	f6 01       	movw	r30, r12
     204:	ec 59       	subi	r30, 0x9C	; 156
     206:	ff 4f       	sbci	r31, 0xFF	; 255
     208:	41 e0       	ldi	r20, 0x01	; 1
     20a:	60 81       	ld	r22, Z
     20c:	86 e0       	ldi	r24, 0x06	; 6
     20e:	0e 94 32 03 	call	0x664	; 0x664 <DIO_u8SetPinValue>
			if(Local_u8ReadKeyFlag == 1)
     212:	f1 e0       	ldi	r31, 0x01	; 1
     214:	9f 16       	cp	r9, r31
     216:	41 f0       	breq	.+16     	; 0x228 <KPD_u8GetKeyStatus+0xc4>
	u8 Local_u8ReadKeyFlag = 0;
	u8 Local_u8ColomnPinValue = 0;
	/* check input arguments */
	if(Copy_pu8Returnedkey != NULL){
		/* Activate all rows (LOW) */
		for(Local_u8CounterRow = 0; Local_u8CounterRow < 4; Local_u8CounterRow++){
     218:	0f 5f       	subi	r16, 0xFF	; 255
     21a:	03 c0       	rjmp	.+6      	; 0x222 <KPD_u8GetKeyStatus+0xbe>
     21c:	5c 01       	movw	r10, r24
     21e:	91 2c       	mov	r9, r1
     220:	00 e0       	ldi	r16, 0x00	; 0
     222:	04 30       	cpi	r16, 0x04	; 4
     224:	08 f4       	brcc	.+2      	; 0x228 <KPD_u8GetKeyStatus+0xc4>
     226:	b2 cf       	rjmp	.-156    	; 0x18c <KPD_u8GetKeyStatus+0x28>
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8Rows[Local_u8CounterRow],DIO_u8_HIGH);
			if(Local_u8ReadKeyFlag == 1)
				break;
		}
		/* if exited loop and no key is pressed */
		if(Local_u8ReadKeyFlag == 0)
     228:	91 10       	cpse	r9, r1
     22a:	05 c0       	rjmp	.+10     	; 0x236 <KPD_u8GetKeyStatus+0xd2>
			*Copy_pu8Returnedkey = KPD_u8_Key_Not_Pressed;
     22c:	8f ef       	ldi	r24, 0xFF	; 255
     22e:	f5 01       	movw	r30, r10
     230:	80 83       	st	Z, r24
/* Output rows pins */
u8 KPD_Au8Rows[KPD_u8_NUMBER_OF_ROWS] = KPD_ROWS;
/* Input columns pins */
u8 KPD_Au8Colomns[KPD_u8_NUMBER_OF_COLS] = KPD_COLS;
u8 KPD_u8GetKeyStatus(u8 * Copy_pu8Returnedkey){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	01 c0       	rjmp	.+2      	; 0x238 <KPD_u8GetKeyStatus+0xd4>
     236:	81 e0       	ldi	r24, 0x01	; 1
			*Copy_pu8Returnedkey = KPD_u8_Key_Not_Pressed;
	}else{
		Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
     238:	0f 90       	pop	r0
     23a:	df 91       	pop	r29
     23c:	cf 91       	pop	r28
     23e:	1f 91       	pop	r17
     240:	0f 91       	pop	r16
     242:	ff 90       	pop	r15
     244:	ef 90       	pop	r14
     246:	df 90       	pop	r13
     248:	cf 90       	pop	r12
     24a:	bf 90       	pop	r11
     24c:	af 90       	pop	r10
     24e:	9f 90       	pop	r9
     250:	08 95       	ret

00000252 <LCD_voidSendCmnd>:
		LCD_voidSendChar('-');
		num *= -1;
	}
		numberPositiveToString(num,Local_pu8String);
		LCD_u8SendString(Local_pu8String);
}
     252:	cf 93       	push	r28
     254:	c8 2f       	mov	r28, r24
     256:	40 e0       	ldi	r20, 0x00	; 0
     258:	6e e0       	ldi	r22, 0x0E	; 14
     25a:	85 e0       	ldi	r24, 0x05	; 5
     25c:	0e 94 32 03 	call	0x664	; 0x664 <DIO_u8SetPinValue>
     260:	40 e0       	ldi	r20, 0x00	; 0
     262:	6f e0       	ldi	r22, 0x0F	; 15
     264:	85 e0       	ldi	r24, 0x05	; 5
     266:	0e 94 32 03 	call	0x664	; 0x664 <DIO_u8SetPinValue>
     26a:	6c 2f       	mov	r22, r28
     26c:	87 e0       	ldi	r24, 0x07	; 7
     26e:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <DIO_u8SetPortValue>
     272:	41 e0       	ldi	r20, 0x01	; 1
     274:	60 e1       	ldi	r22, 0x10	; 16
     276:	85 e0       	ldi	r24, 0x05	; 5
     278:	0e 94 32 03 	call	0x664	; 0x664 <DIO_u8SetPinValue>
     27c:	00 00       	nop
     27e:	40 e0       	ldi	r20, 0x00	; 0
     280:	60 e1       	ldi	r22, 0x10	; 16
     282:	85 e0       	ldi	r24, 0x05	; 5
     284:	0e 94 32 03 	call	0x664	; 0x664 <DIO_u8SetPinValue>
     288:	cf 91       	pop	r28
     28a:	08 95       	ret

0000028c <LCD_voidInit>:
     28c:	8d e2       	ldi	r24, 0x2D	; 45
     28e:	92 e2       	ldi	r25, 0x22	; 34
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	f1 f7       	brne	.-4      	; 0x290 <LCD_voidInit+0x4>
     294:	00 c0       	rjmp	.+0      	; 0x296 <LCD_voidInit+0xa>
     296:	00 00       	nop
     298:	88 e3       	ldi	r24, 0x38	; 56
     29a:	0e 94 29 01 	call	0x252	; 0x252 <LCD_voidSendCmnd>
     29e:	90 e1       	ldi	r25, 0x10	; 16
     2a0:	9a 95       	dec	r25
     2a2:	f1 f7       	brne	.-4      	; 0x2a0 <LCD_voidInit+0x14>
     2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <LCD_voidInit+0x1a>
     2a6:	8c e0       	ldi	r24, 0x0C	; 12
     2a8:	0e 94 29 01 	call	0x252	; 0x252 <LCD_voidSendCmnd>
     2ac:	80 e1       	ldi	r24, 0x10	; 16
     2ae:	8a 95       	dec	r24
     2b0:	f1 f7       	brne	.-4      	; 0x2ae <LCD_voidInit+0x22>
     2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <LCD_voidInit+0x28>
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	0e 94 29 01 	call	0x252	; 0x252 <LCD_voidSendCmnd>
     2ba:	83 ef       	ldi	r24, 0xF3	; 243
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	01 97       	sbiw	r24, 0x01	; 1
     2c0:	f1 f7       	brne	.-4      	; 0x2be <LCD_voidInit+0x32>
     2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <LCD_voidInit+0x38>
     2c4:	00 00       	nop
     2c6:	86 e0       	ldi	r24, 0x06	; 6
     2c8:	0e 94 29 01 	call	0x252	; 0x252 <LCD_voidSendCmnd>
     2cc:	08 95       	ret

000002ce <LCD_voidSendChar>:
     2ce:	cf 93       	push	r28
     2d0:	c8 2f       	mov	r28, r24
     2d2:	41 e0       	ldi	r20, 0x01	; 1
     2d4:	6e e0       	ldi	r22, 0x0E	; 14
     2d6:	85 e0       	ldi	r24, 0x05	; 5
     2d8:	0e 94 32 03 	call	0x664	; 0x664 <DIO_u8SetPinValue>
     2dc:	40 e0       	ldi	r20, 0x00	; 0
     2de:	6f e0       	ldi	r22, 0x0F	; 15
     2e0:	85 e0       	ldi	r24, 0x05	; 5
     2e2:	0e 94 32 03 	call	0x664	; 0x664 <DIO_u8SetPinValue>
     2e6:	6c 2f       	mov	r22, r28
     2e8:	87 e0       	ldi	r24, 0x07	; 7
     2ea:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <DIO_u8SetPortValue>
     2ee:	41 e0       	ldi	r20, 0x01	; 1
     2f0:	60 e1       	ldi	r22, 0x10	; 16
     2f2:	85 e0       	ldi	r24, 0x05	; 5
     2f4:	0e 94 32 03 	call	0x664	; 0x664 <DIO_u8SetPinValue>
     2f8:	00 00       	nop
     2fa:	40 e0       	ldi	r20, 0x00	; 0
     2fc:	60 e1       	ldi	r22, 0x10	; 16
     2fe:	85 e0       	ldi	r24, 0x05	; 5
     300:	0e 94 32 03 	call	0x664	; 0x664 <DIO_u8SetPinValue>
     304:	cf 91       	pop	r28
     306:	08 95       	ret

00000308 <LCD_u8SendString_const>:
     308:	0f 93       	push	r16
     30a:	1f 93       	push	r17
     30c:	cf 93       	push	r28
     30e:	00 97       	sbiw	r24, 0x00	; 0
     310:	31 f4       	brne	.+12     	; 0x31e <LCD_u8SendString_const+0x16>
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	0d c0       	rjmp	.+26     	; 0x330 <LCD_u8SendString_const+0x28>
     316:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCD_voidSendChar>
     31a:	cf 5f       	subi	r28, 0xFF	; 255
     31c:	02 c0       	rjmp	.+4      	; 0x322 <LCD_u8SendString_const+0x1a>
     31e:	8c 01       	movw	r16, r24
     320:	c0 e0       	ldi	r28, 0x00	; 0
     322:	f8 01       	movw	r30, r16
     324:	ec 0f       	add	r30, r28
     326:	f1 1d       	adc	r31, r1
     328:	80 81       	ld	r24, Z
     32a:	81 11       	cpse	r24, r1
     32c:	f4 cf       	rjmp	.-24     	; 0x316 <LCD_u8SendString_const+0xe>
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	cf 91       	pop	r28
     332:	1f 91       	pop	r17
     334:	0f 91       	pop	r16
     336:	08 95       	ret

00000338 <LCD_u8SetPos>:
u8 LCD_u8SetPos(u8 Copy_u8Line,u8 Copy_u8Position){
	u8 Local_u8ErrorState = STD_TYPES_OK;
	if(Copy_u8Position<40){
     338:	68 32       	cpi	r22, 0x28	; 40
     33a:	88 f4       	brcc	.+34     	; 0x35e <LCD_u8SetPos+0x26>
		switch(Copy_u8Line){
     33c:	88 23       	and	r24, r24
     33e:	19 f0       	breq	.+6      	; 0x346 <LCD_u8SetPos+0xe>
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	39 f0       	breq	.+14     	; 0x352 <LCD_u8SetPos+0x1a>
     344:	0e c0       	rjmp	.+28     	; 0x362 <LCD_u8SetPos+0x2a>
			case LCD_u8_LINE1:
				LCD_voidSendCmnd(0b10000000+Copy_u8Position);
     346:	80 e8       	ldi	r24, 0x80	; 128
     348:	86 0f       	add	r24, r22
     34a:	0e 94 29 01 	call	0x252	; 0x252 <LCD_voidSendCmnd>
	}
		numberPositiveToString(num,Local_pu8String);
		LCD_u8SendString(Local_pu8String);
}
u8 LCD_u8SetPos(u8 Copy_u8Line,u8 Copy_u8Position){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     34e:	81 e0       	ldi	r24, 0x01	; 1
	if(Copy_u8Position<40){
		switch(Copy_u8Line){
			case LCD_u8_LINE1:
				LCD_voidSendCmnd(0b10000000+Copy_u8Position);
			break;
     350:	08 95       	ret
			case LCD_u8_LINE2:
				LCD_voidSendCmnd(0b11000000+Copy_u8Position);
     352:	80 ec       	ldi	r24, 0xC0	; 192
     354:	86 0f       	add	r24, r22
     356:	0e 94 29 01 	call	0x252	; 0x252 <LCD_voidSendCmnd>
	}
		numberPositiveToString(num,Local_pu8String);
		LCD_u8SendString(Local_pu8String);
}
u8 LCD_u8SetPos(u8 Copy_u8Line,u8 Copy_u8Position){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     35a:	81 e0       	ldi	r24, 0x01	; 1
			case LCD_u8_LINE1:
				LCD_voidSendCmnd(0b10000000+Copy_u8Position);
			break;
			case LCD_u8_LINE2:
				LCD_voidSendCmnd(0b11000000+Copy_u8Position);
			break;
     35c:	08 95       	ret
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
		}
	}else{
		Local_u8ErrorState = STD_TYPES_NOK;
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	08 95       	ret
			break;
			case LCD_u8_LINE2:
				LCD_voidSendCmnd(0b11000000+Copy_u8Position);
			break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
     362:	80 e0       	ldi	r24, 0x00	; 0
		}
	}else{
		Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
     364:	08 95       	ret

00000366 <LCD_voidClear>:

void LCD_voidClear(){
	LCD_voidSendCmnd(0x01);
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	0e 94 29 01 	call	0x252	; 0x252 <LCD_voidSendCmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     36c:	83 ef       	ldi	r24, 0xF3	; 243
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	01 97       	sbiw	r24, 0x01	; 1
     372:	f1 f7       	brne	.-4      	; 0x370 <LCD_voidClear+0xa>
     374:	00 c0       	rjmp	.+0      	; 0x376 <LCD_voidClear+0x10>
     376:	00 00       	nop
     378:	08 95       	ret

0000037a <set_angle>:
/* include from SERVO */
#include "SERVO_private.h"
#include "SERVO_config.h"
#include "SERVO_interface.h"
void set_angle(u8 Copy_u8Angle){
	TIMERS_u16_OCR1A_REG = (u16)(((Copy_u8Angle/180.0)*2000) + 499);
     37a:	68 2f       	mov	r22, r24
     37c:	70 e0       	ldi	r23, 0x00	; 0
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__floatsisf>
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	44 e3       	ldi	r20, 0x34	; 52
     38c:	53 e4       	ldi	r21, 0x43	; 67
     38e:	0e 94 c6 09 	call	0x138c	; 0x138c <__divsf3>
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	4a ef       	ldi	r20, 0xFA	; 250
     398:	54 e4       	ldi	r21, 0x44	; 68
     39a:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__mulsf3>
     39e:	20 e0       	ldi	r18, 0x00	; 0
     3a0:	30 e8       	ldi	r19, 0x80	; 128
     3a2:	49 ef       	ldi	r20, 0xF9	; 249
     3a4:	53 e4       	ldi	r21, 0x43	; 67
     3a6:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__addsf3>
     3aa:	0e 94 38 0a 	call	0x1470	; 0x1470 <__fixunssfsi>
     3ae:	7b bd       	out	0x2b, r23	; 43
     3b0:	6a bd       	out	0x2a, r22	; 42
     3b2:	08 95       	ret

000003b4 <PrintToUser_const>:
		}
		}/* exited while when the user pressed OK ('+') */
		Copy_pu8ReturnedInput[Local_u8Counter] = '\0';
		LCD_voidClear();
		_delay_ms(2);
	}
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	ec 01       	movw	r28, r24
     3ba:	60 e0       	ldi	r22, 0x00	; 0
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_u8SetPos>
     3c2:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_voidClear>
     3c6:	ce 01       	movw	r24, r28
     3c8:	0e 94 84 01 	call	0x308	; 0x308 <LCD_u8SendString_const>
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	08 95       	ret

000003d2 <is_str_equal>:
     3d2:	dc 01       	movw	r26, r24
     3d4:	40 e0       	ldi	r20, 0x00	; 0
     3d6:	07 c0       	rjmp	.+14     	; 0x3e6 <is_str_equal+0x14>
     3d8:	fb 01       	movw	r30, r22
     3da:	e2 0f       	add	r30, r18
     3dc:	f3 1f       	adc	r31, r19
     3de:	50 81       	ld	r21, Z
     3e0:	95 13       	cpse	r25, r21
     3e2:	09 c0       	rjmp	.+18     	; 0x3f6 <is_str_equal+0x24>
     3e4:	4f 5f       	subi	r20, 0xFF	; 255
     3e6:	24 2f       	mov	r18, r20
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	fd 01       	movw	r30, r26
     3ec:	e2 0f       	add	r30, r18
     3ee:	f3 1f       	adc	r31, r19
     3f0:	90 81       	ld	r25, Z
     3f2:	91 11       	cpse	r25, r1
     3f4:	f1 cf       	rjmp	.-30     	; 0x3d8 <is_str_equal+0x6>
     3f6:	fb 01       	movw	r30, r22
     3f8:	e2 0f       	add	r30, r18
     3fa:	f3 1f       	adc	r31, r19
     3fc:	80 81       	ld	r24, Z
     3fe:	98 13       	cpse	r25, r24
     400:	04 c0       	rjmp	.+8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     402:	99 23       	and	r25, r25
     404:	21 f0       	breq	.+8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	08 95       	ret
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	08 95       	ret
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	08 95       	ret

00000412 <getInputFromUser_const>:
	void getInputFromUser_const(u8 *Copy_pu8ReturnedInput,const u8 *Copy_pu8PrintedMessage){
     412:	ef 92       	push	r14
     414:	ff 92       	push	r15
     416:	0f 93       	push	r16
     418:	1f 93       	push	r17
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	1f 92       	push	r1
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
     424:	7c 01       	movw	r14, r24
     426:	8b 01       	movw	r16, r22
		u8 Local_u8EnteredKey = KPD_u8_Key_Not_Pressed;
     428:	8f ef       	ldi	r24, 0xFF	; 255
     42a:	89 83       	std	Y+1, r24	; 0x01
		u8 Local_u8Counter = 0;
		/* print message */
		LCD_voidClear();
     42c:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_voidClear>
		LCD_u8SetPos(LCD_u8_LINE1,0);
     430:	60 e0       	ldi	r22, 0x00	; 0
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_u8SetPos>
     438:	83 ef       	ldi	r24, 0xF3	; 243
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	01 97       	sbiw	r24, 0x01	; 1
     43e:	f1 f7       	brne	.-4      	; 0x43c <getInputFromUser_const+0x2a>
     440:	00 c0       	rjmp	.+0      	; 0x442 <getInputFromUser_const+0x30>
     442:	00 00       	nop
		/*wait for changes to take effect*/
		_delay_ms(2);
		/* go to input line to read input */
		LCD_u8SendString_const(Copy_pu8PrintedMessage);
     444:	c8 01       	movw	r24, r16
     446:	0e 94 84 01 	call	0x308	; 0x308 <LCD_u8SendString_const>
		LCD_u8SetPos(LCD_u8_LINE2,0);
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_u8SetPos>
		/*read keypad*/
		Local_u8Counter = 0;
     452:	10 e0       	ldi	r17, 0x00	; 0
		while((Local_u8EnteredKey != '=')&&(Local_u8Counter<MAX_IN_PASSWORD_SIZE)){
     454:	19 c0       	rjmp	.+50     	; 0x488 <getInputFromUser_const+0x76>
			/* key != ok*/
			KPD_u8GetKeyStatus(&Local_u8EnteredKey);
     456:	ce 01       	movw	r24, r28
     458:	01 96       	adiw	r24, 0x01	; 1
     45a:	0e 94 b2 00 	call	0x164	; 0x164 <KPD_u8GetKeyStatus>
			if((Local_u8EnteredKey >= '0')&&(Local_u8EnteredKey<='9')){/* key is a number */
     45e:	89 81       	ldd	r24, Y+1	; 0x01
     460:	90 ed       	ldi	r25, 0xD0	; 208
     462:	98 0f       	add	r25, r24
     464:	9a 30       	cpi	r25, 0x0A	; 10
     466:	58 f4       	brcc	.+22     	; 0x47e <getInputFromUser_const+0x6c>
				Copy_pu8ReturnedInput[Local_u8Counter] = Local_u8EnteredKey;
     468:	f7 01       	movw	r30, r14
     46a:	e1 0f       	add	r30, r17
     46c:	f1 1d       	adc	r31, r1
     46e:	80 83       	st	Z, r24
				LCD_voidSendChar(Local_u8EnteredKey);
     470:	89 81       	ldd	r24, Y+1	; 0x01
     472:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCD_voidSendChar>
				Local_u8Counter++;
     476:	1f 5f       	subi	r17, 0xFF	; 255
				Local_u8EnteredKey = KPD_u8_Key_Not_Pressed;
     478:	8f ef       	ldi	r24, 0xFF	; 255
     47a:	89 83       	std	Y+1, r24	; 0x01
     47c:	05 c0       	rjmp	.+10     	; 0x488 <getInputFromUser_const+0x76>
				}else if((Local_u8EnteredKey == '=')&&(Local_u8Counter == 0)){
     47e:	8d 33       	cpi	r24, 0x3D	; 61
     480:	19 f4       	brne	.+6      	; 0x488 <getInputFromUser_const+0x76>
     482:	11 11       	cpse	r17, r1
     484:	01 c0       	rjmp	.+2      	; 0x488 <getInputFromUser_const+0x76>
				Local_u8EnteredKey = '\0';
     486:	19 82       	std	Y+1, r1	; 0x01
		/* go to input line to read input */
		LCD_u8SendString_const(Copy_pu8PrintedMessage);
		LCD_u8SetPos(LCD_u8_LINE2,0);
		/*read keypad*/
		Local_u8Counter = 0;
		while((Local_u8EnteredKey != '=')&&(Local_u8Counter<MAX_IN_PASSWORD_SIZE)){
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	8d 33       	cpi	r24, 0x3D	; 61
     48c:	11 f0       	breq	.+4      	; 0x492 <getInputFromUser_const+0x80>
     48e:	10 31       	cpi	r17, 0x10	; 16
     490:	10 f3       	brcs	.-60     	; 0x456 <getInputFromUser_const+0x44>
				Local_u8EnteredKey = KPD_u8_Key_Not_Pressed;
				}else if((Local_u8EnteredKey == '=')&&(Local_u8Counter == 0)){
				Local_u8EnteredKey = '\0';
			}
			}/* exited while when the user pressed OK ('+') */
			Copy_pu8ReturnedInput[Local_u8Counter] = '\0';
     492:	f7 01       	movw	r30, r14
     494:	e1 0f       	add	r30, r17
     496:	f1 1d       	adc	r31, r1
     498:	10 82       	st	Z, r1
			LCD_voidClear();
     49a:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_voidClear>
     49e:	83 ef       	ldi	r24, 0xF3	; 243
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	01 97       	sbiw	r24, 0x01	; 1
     4a4:	f1 f7       	brne	.-4      	; 0x4a2 <getInputFromUser_const+0x90>
     4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <getInputFromUser_const+0x96>
     4a8:	00 00       	nop
			_delay_ms(2);
		}
     4aa:	0f 90       	pop	r0
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	ff 90       	pop	r15
     4b6:	ef 90       	pop	r14
     4b8:	08 95       	ret

000004ba <open_door>:
		void open_door(){
			DCM_voidTurnRight();
     4ba:	0e 94 91 00 	call	0x122	; 0x122 <DCM_voidTurnRight>
     4be:	2f e7       	ldi	r18, 0x7F	; 127
     4c0:	8a e1       	ldi	r24, 0x1A	; 26
     4c2:	96 e0       	ldi	r25, 0x06	; 6
     4c4:	21 50       	subi	r18, 0x01	; 1
     4c6:	80 40       	sbci	r24, 0x00	; 0
     4c8:	90 40       	sbci	r25, 0x00	; 0
     4ca:	e1 f7       	brne	.-8      	; 0x4c4 <open_door+0xa>
     4cc:	00 c0       	rjmp	.+0      	; 0x4ce <open_door+0x14>
     4ce:	00 00       	nop
			_delay_ms(2000);
			DCM_voidTurnOff();
     4d0:	0e 94 a7 00 	call	0x14e	; 0x14e <DCM_voidTurnOff>
     4d4:	08 95       	ret

000004d6 <close_door>:
		}
		void close_door(){
			DCM_voidTurnLeft();
     4d6:	0e 94 9c 00 	call	0x138	; 0x138 <DCM_voidTurnLeft>
     4da:	2f e7       	ldi	r18, 0x7F	; 127
     4dc:	8a e1       	ldi	r24, 0x1A	; 26
     4de:	96 e0       	ldi	r25, 0x06	; 6
     4e0:	21 50       	subi	r18, 0x01	; 1
     4e2:	80 40       	sbci	r24, 0x00	; 0
     4e4:	90 40       	sbci	r25, 0x00	; 0
     4e6:	e1 f7       	brne	.-8      	; 0x4e0 <close_door+0xa>
     4e8:	00 c0       	rjmp	.+0      	; 0x4ea <close_door+0x14>
     4ea:	00 00       	nop
			_delay_ms(2000);
			DCM_voidTurnOff();
     4ec:	0e 94 a7 00 	call	0x14e	; 0x14e <DCM_voidTurnOff>
     4f0:	08 95       	ret

000004f2 <unlock_the_lock>:
		}
		void unlock_the_lock(){
			set_angle(180);
     4f2:	84 eb       	ldi	r24, 0xB4	; 180
     4f4:	0e 94 bd 01 	call	0x37a	; 0x37a <set_angle>
     4f8:	2f e5       	ldi	r18, 0x5F	; 95
     4fa:	8a ee       	ldi	r24, 0xEA	; 234
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	21 50       	subi	r18, 0x01	; 1
     500:	80 40       	sbci	r24, 0x00	; 0
     502:	90 40       	sbci	r25, 0x00	; 0
     504:	e1 f7       	brne	.-8      	; 0x4fe <unlock_the_lock+0xc>
     506:	00 c0       	rjmp	.+0      	; 0x508 <unlock_the_lock+0x16>
     508:	00 00       	nop
     50a:	08 95       	ret

0000050c <lock_the_lock>:
			_delay_ms(300);
		}
		void lock_the_lock(){
			set_angle(0);
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	0e 94 bd 01 	call	0x37a	; 0x37a <set_angle>
     512:	2f e5       	ldi	r18, 0x5F	; 95
     514:	8a ee       	ldi	r24, 0xEA	; 234
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	21 50       	subi	r18, 0x01	; 1
     51a:	80 40       	sbci	r24, 0x00	; 0
     51c:	90 40       	sbci	r25, 0x00	; 0
     51e:	e1 f7       	brne	.-8      	; 0x518 <lock_the_lock+0xc>
     520:	00 c0       	rjmp	.+0      	; 0x522 <lock_the_lock+0x16>
     522:	00 00       	nop
     524:	08 95       	ret

00000526 <main>:
void PrintToUser_const(const u8 *Copy_pu8PrintedString);
void getInputFromUser_const(u8 *Copy_pu8ReturnedInput,const u8 *Copy_pu8PrintedMessage);
void unlock_the_lock();
void lock_the_lock();
/*********************************************          main                 *****************************/
int main(void){/*startup code*/
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	cd b7       	in	r28, 0x3d	; 61
     52c:	de b7       	in	r29, 0x3e	; 62
     52e:	65 97       	sbiw	r28, 0x15	; 21
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	f8 94       	cli
     534:	de bf       	out	0x3e, r29	; 62
     536:	0f be       	out	0x3f, r0	; 63
     538:	cd bf       	out	0x3d, r28	; 61
     53a:	87 ea       	ldi	r24, 0xA7	; 167
     53c:	91 e6       	ldi	r25, 0x61	; 97
     53e:	01 97       	sbiw	r24, 0x01	; 1
     540:	f1 f7       	brne	.-4      	; 0x53e <main+0x18>
     542:	00 c0       	rjmp	.+0      	; 0x544 <main+0x1e>
     544:	00 00       	nop
	_delay_ms(100);
	DIO_voidInit();
     546:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_voidInit>
	LCD_voidInit();
     54a:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_voidInit>
	TIMERS_voidTimer1Init();
     54e:	0e 94 12 07 	call	0xe24	; 0xe24 <TIMERS_voidTimer1Init>
	GI_voidEnable();
     552:	0e 94 0e 07 	call	0xe1c	; 0xe1c <GI_voidEnable>
	
	u8 correctPassword[] = "1234";
     556:	85 e0       	ldi	r24, 0x05	; 5
     558:	e4 ec       	ldi	r30, 0xC4	; 196
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	de 01       	movw	r26, r28
     55e:	11 96       	adiw	r26, 0x01	; 1
     560:	01 90       	ld	r0, Z+
     562:	0d 92       	st	X+, r0
     564:	8a 95       	dec	r24
     566:	e1 f7       	brne	.-8      	; 0x560 <main+0x3a>
	u8 input[MAX_IN_PASSWORD_SIZE];
	
	while(1){/* Looping code */
		/* ask user to enter the password */
		getInputFromUser_const(input,(const u8*)"Enter Password");
     568:	68 e7       	ldi	r22, 0x78	; 120
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	ce 01       	movw	r24, r28
     56e:	06 96       	adiw	r24, 0x06	; 6
     570:	0e 94 09 02 	call	0x412	; 0x412 <getInputFromUser_const>
		/* check if the entered password equals the correct password */
		if(is_str_equal(input,correctPassword)){
     574:	be 01       	movw	r22, r28
     576:	6f 5f       	subi	r22, 0xFF	; 255
     578:	7f 4f       	sbci	r23, 0xFF	; 255
     57a:	ce 01       	movw	r24, r28
     57c:	06 96       	adiw	r24, 0x06	; 6
     57e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <is_str_equal>
     582:	88 23       	and	r24, r24
     584:	11 f1       	breq	.+68     	; 0x5ca <main+0xa4>
			/* if the password is correct then open the door for while then close it */
			PrintToUser_const((const u8*)"opening...");
     586:	87 e8       	ldi	r24, 0x87	; 135
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <PrintToUser_const>
			unlock_the_lock();
     58e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <unlock_the_lock>
			open_door();
     592:	0e 94 5d 02 	call	0x4ba	; 0x4ba <open_door>
			PrintToUser_const((const u8*)"door opened");
     596:	82 e9       	ldi	r24, 0x92	; 146
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <PrintToUser_const>
     59e:	9f e7       	ldi	r25, 0x7F	; 127
     5a0:	24 e8       	ldi	r18, 0x84	; 132
     5a2:	8e e1       	ldi	r24, 0x1E	; 30
     5a4:	91 50       	subi	r25, 0x01	; 1
     5a6:	20 40       	sbci	r18, 0x00	; 0
     5a8:	80 40       	sbci	r24, 0x00	; 0
     5aa:	e1 f7       	brne	.-8      	; 0x5a4 <main+0x7e>
     5ac:	00 c0       	rjmp	.+0      	; 0x5ae <main+0x88>
     5ae:	00 00       	nop
			_delay_ms(10000);
			PrintToUser_const((const u8*)"closing...");
     5b0:	8e e9       	ldi	r24, 0x9E	; 158
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <PrintToUser_const>
			close_door();
     5b8:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <close_door>
			lock_the_lock();
     5bc:	0e 94 86 02 	call	0x50c	; 0x50c <lock_the_lock>
			PrintToUser_const((const u8*)"door closed");
     5c0:	89 ea       	ldi	r24, 0xA9	; 169
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <PrintToUser_const>
     5c8:	04 c0       	rjmp	.+8      	; 0x5d2 <main+0xac>
			}else{
			/* if incorrect password then print it */
			PrintToUser_const((const u8*)"Incorrect Pass");
     5ca:	85 eb       	ldi	r24, 0xB5	; 181
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 da 01 	call	0x3b4	; 0x3b4 <PrintToUser_const>
     5d2:	9f e7       	ldi	r25, 0x7F	; 127
     5d4:	2a e1       	ldi	r18, 0x1A	; 26
     5d6:	86 e0       	ldi	r24, 0x06	; 6
     5d8:	91 50       	subi	r25, 0x01	; 1
     5da:	20 40       	sbci	r18, 0x00	; 0
     5dc:	80 40       	sbci	r24, 0x00	; 0
     5de:	e1 f7       	brne	.-8      	; 0x5d8 <main+0xb2>
     5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <main+0xbc>
     5e2:	00 00       	nop
     5e4:	c1 cf       	rjmp	.-126    	; 0x568 <main+0x42>

000005e6 <__vector_16>:
}

/*prototype of ISR*/
void __vector_16 (void) __attribute__((signal));
/*implementation of ISR*/
void __vector_16(void){
     5e6:	1f 92       	push	r1
     5e8:	0f 92       	push	r0
     5ea:	0f b6       	in	r0, 0x3f	; 63
     5ec:	0f 92       	push	r0
     5ee:	11 24       	eor	r1, r1
     5f0:	2f 93       	push	r18
     5f2:	3f 93       	push	r19
     5f4:	4f 93       	push	r20
     5f6:	5f 93       	push	r21
     5f8:	6f 93       	push	r22
     5fa:	7f 93       	push	r23
     5fc:	8f 93       	push	r24
     5fe:	9f 93       	push	r25
     600:	af 93       	push	r26
     602:	bf 93       	push	r27
     604:	ef 93       	push	r30
     606:	ff 93       	push	r31
	if(ADC_pfNotification != NULL){
     608:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <__data_end>
     60c:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <__data_end+0x1>
     610:	89 2b       	or	r24, r25
     612:	61 f0       	breq	.+24     	; 0x62c <__vector_16+0x46>
		/*clear busy flag*/
		ADC_u8_busy_flag = 0;
     614:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <ADC_u8_busy_flag>
		/*disable interrupt of ADC*/
		CLR_BIT(ADC_u8_ADCSRA_REG,3);
     618:	86 b1       	in	r24, 0x06	; 6
     61a:	87 7f       	andi	r24, 0xF7	; 247
     61c:	86 b9       	out	0x06, r24	; 6
		/*calling notification function*/
		ADC_pfNotification(ADC_u16_ADC_REG);
     61e:	84 b1       	in	r24, 0x04	; 4
     620:	95 b1       	in	r25, 0x05	; 5
     622:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <__data_end>
     626:	f0 91 cb 00 	lds	r31, 0x00CB	; 0x8000cb <__data_end+0x1>
     62a:	09 95       	icall
	}
     62c:	ff 91       	pop	r31
     62e:	ef 91       	pop	r30
     630:	bf 91       	pop	r27
     632:	af 91       	pop	r26
     634:	9f 91       	pop	r25
     636:	8f 91       	pop	r24
     638:	7f 91       	pop	r23
     63a:	6f 91       	pop	r22
     63c:	5f 91       	pop	r21
     63e:	4f 91       	pop	r20
     640:	3f 91       	pop	r19
     642:	2f 91       	pop	r18
     644:	0f 90       	pop	r0
     646:	0f be       	out	0x3f, r0	; 63
     648:	0f 90       	pop	r0
     64a:	1f 90       	pop	r1
     64c:	18 95       	reti

0000064e <DIO_voidInit>:
			break;
		default:
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
     64e:	8f ef       	ldi	r24, 0xFF	; 255
     650:	8a bb       	out	0x1a, r24	; 26
     652:	9f e0       	ldi	r25, 0x0F	; 15
     654:	97 bb       	out	0x17, r25	; 23
     656:	84 bb       	out	0x14, r24	; 20
     658:	81 bb       	out	0x11, r24	; 17
     65a:	1b ba       	out	0x1b, r1	; 27
     65c:	88 bb       	out	0x18, r24	; 24
     65e:	15 ba       	out	0x15, r1	; 21
     660:	12 ba       	out	0x12, r1	; 18
     662:	08 95       	ret

00000664 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
	
	
	switch(Copy_u8PinValue){
     664:	44 23       	and	r20, r20
     666:	09 f4       	brne	.+2      	; 0x66a <DIO_u8SetPinValue+0x6>
     668:	e1 c0       	rjmp	.+450    	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     66a:	41 30       	cpi	r20, 0x01	; 1
     66c:	09 f0       	breq	.+2      	; 0x670 <DIO_u8SetPinValue+0xc>
     66e:	bc c1       	rjmp	.+888    	; 0x9e8 <__stack+0x189>
		case DIO_u8_HIGH:
			switch(Copy_u8PortID){
     670:	86 30       	cpi	r24, 0x06	; 6
     672:	09 f4       	brne	.+2      	; 0x676 <DIO_u8SetPinValue+0x12>
     674:	3f c0       	rjmp	.+126    	; 0x6f4 <DIO_u8SetPinValue+0x90>
     676:	18 f4       	brcc	.+6      	; 0x67e <DIO_u8SetPinValue+0x1a>
     678:	85 30       	cpi	r24, 0x05	; 5
     67a:	41 f0       	breq	.+16     	; 0x68c <DIO_u8SetPinValue+0x28>
     67c:	b7 c1       	rjmp	.+878    	; 0x9ec <__stack+0x18d>
     67e:	87 30       	cpi	r24, 0x07	; 7
     680:	09 f4       	brne	.+2      	; 0x684 <DIO_u8SetPinValue+0x20>
     682:	6c c0       	rjmp	.+216    	; 0x75c <DIO_u8SetPinValue+0xf8>
     684:	88 30       	cpi	r24, 0x08	; 8
     686:	09 f4       	brne	.+2      	; 0x68a <DIO_u8SetPinValue+0x26>
     688:	9d c0       	rjmp	.+314    	; 0x7c4 <DIO_u8SetPinValue+0x160>
     68a:	b0 c1       	rjmp	.+864    	; 0x9ec <__stack+0x18d>
				case DIO_u8_PortA:
					switch(Copy_u8PinID){
     68c:	86 2f       	mov	r24, r22
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	fc 01       	movw	r30, r24
     692:	39 97       	sbiw	r30, 0x09	; 9
     694:	e8 30       	cpi	r30, 0x08	; 8
     696:	f1 05       	cpc	r31, r1
     698:	08 f0       	brcs	.+2      	; 0x69c <DIO_u8SetPinValue+0x38>
     69a:	aa c1       	rjmp	.+852    	; 0x9f0 <__stack+0x191>
     69c:	e6 5d       	subi	r30, 0xD6	; 214
     69e:	ff 4f       	sbci	r31, 0xFF	; 255
     6a0:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <__tablejump2__>
						case DIO_u8_Pin0:
							SET_BIT(DIO_u8_PORTA_REG,0);
     6a4:	8b b3       	in	r24, 0x1b	; 27
     6a6:	81 60       	ori	r24, 0x01	; 1
     6a8:	8b bb       	out	0x1b, r24	; 27
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     6aa:	81 e0       	ldi	r24, 0x01	; 1
			switch(Copy_u8PortID){
				case DIO_u8_PortA:
					switch(Copy_u8PinID){
						case DIO_u8_Pin0:
							SET_BIT(DIO_u8_PORTA_REG,0);
							break;
     6ac:	08 95       	ret
						case DIO_u8_Pin1:
							SET_BIT(DIO_u8_PORTA_REG,1);
     6ae:	8b b3       	in	r24, 0x1b	; 27
     6b0:	82 60       	ori	r24, 0x02	; 2
     6b2:	8b bb       	out	0x1b, r24	; 27
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     6b4:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin0:
							SET_BIT(DIO_u8_PORTA_REG,0);
							break;
						case DIO_u8_Pin1:
							SET_BIT(DIO_u8_PORTA_REG,1);
							break;
     6b6:	08 95       	ret
						case DIO_u8_Pin2:
							SET_BIT(DIO_u8_PORTA_REG,2);
     6b8:	8b b3       	in	r24, 0x1b	; 27
     6ba:	84 60       	ori	r24, 0x04	; 4
     6bc:	8b bb       	out	0x1b, r24	; 27
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     6be:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin1:
							SET_BIT(DIO_u8_PORTA_REG,1);
							break;
						case DIO_u8_Pin2:
							SET_BIT(DIO_u8_PORTA_REG,2);
							break;
     6c0:	08 95       	ret
						case DIO_u8_Pin3:
							SET_BIT(DIO_u8_PORTA_REG,3);
     6c2:	8b b3       	in	r24, 0x1b	; 27
     6c4:	88 60       	ori	r24, 0x08	; 8
     6c6:	8b bb       	out	0x1b, r24	; 27
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     6c8:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin2:
							SET_BIT(DIO_u8_PORTA_REG,2);
							break;
						case DIO_u8_Pin3:
							SET_BIT(DIO_u8_PORTA_REG,3);
							break;
     6ca:	08 95       	ret
						case DIO_u8_Pin4:
							SET_BIT(DIO_u8_PORTA_REG,4);
     6cc:	8b b3       	in	r24, 0x1b	; 27
     6ce:	80 61       	ori	r24, 0x10	; 16
     6d0:	8b bb       	out	0x1b, r24	; 27
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     6d2:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin3:
							SET_BIT(DIO_u8_PORTA_REG,3);
							break;
						case DIO_u8_Pin4:
							SET_BIT(DIO_u8_PORTA_REG,4);
							break;
     6d4:	08 95       	ret
						case DIO_u8_Pin5:
							SET_BIT(DIO_u8_PORTA_REG,5);
     6d6:	8b b3       	in	r24, 0x1b	; 27
     6d8:	80 62       	ori	r24, 0x20	; 32
     6da:	8b bb       	out	0x1b, r24	; 27
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     6dc:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin4:
							SET_BIT(DIO_u8_PORTA_REG,4);
							break;
						case DIO_u8_Pin5:
							SET_BIT(DIO_u8_PORTA_REG,5);
							break;
     6de:	08 95       	ret
						case DIO_u8_Pin6:
							SET_BIT(DIO_u8_PORTA_REG,6);
     6e0:	8b b3       	in	r24, 0x1b	; 27
     6e2:	80 64       	ori	r24, 0x40	; 64
     6e4:	8b bb       	out	0x1b, r24	; 27
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     6e6:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin5:
							SET_BIT(DIO_u8_PORTA_REG,5);
							break;
						case DIO_u8_Pin6:
							SET_BIT(DIO_u8_PORTA_REG,6);
							break;
     6e8:	08 95       	ret
						case DIO_u8_Pin7:
							SET_BIT(DIO_u8_PORTA_REG,7);
     6ea:	8b b3       	in	r24, 0x1b	; 27
     6ec:	80 68       	ori	r24, 0x80	; 128
     6ee:	8b bb       	out	0x1b, r24	; 27
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     6f0:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin6:
							SET_BIT(DIO_u8_PORTA_REG,6);
							break;
						case DIO_u8_Pin7:
							SET_BIT(DIO_u8_PORTA_REG,7);
							break;
     6f2:	08 95       	ret
						default:
						Local_u8ErrorState = STD_TYPES_NOK;
					}
					break;
				case DIO_u8_PortB:
					switch(Copy_u8PinID){
     6f4:	86 2f       	mov	r24, r22
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	fc 01       	movw	r30, r24
     6fa:	39 97       	sbiw	r30, 0x09	; 9
     6fc:	e8 30       	cpi	r30, 0x08	; 8
     6fe:	f1 05       	cpc	r31, r1
     700:	08 f0       	brcs	.+2      	; 0x704 <DIO_u8SetPinValue+0xa0>
     702:	78 c1       	rjmp	.+752    	; 0x9f4 <__stack+0x195>
     704:	ee 5c       	subi	r30, 0xCE	; 206
     706:	ff 4f       	sbci	r31, 0xFF	; 255
     708:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <__tablejump2__>
						case DIO_u8_Pin0:
						SET_BIT(DIO_u8_PORTB_REG,0);
     70c:	88 b3       	in	r24, 0x18	; 24
     70e:	81 60       	ori	r24, 0x01	; 1
     710:	88 bb       	out	0x18, r24	; 24
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     712:	81 e0       	ldi	r24, 0x01	; 1
					break;
				case DIO_u8_PortB:
					switch(Copy_u8PinID){
						case DIO_u8_Pin0:
						SET_BIT(DIO_u8_PORTB_REG,0);
						break;
     714:	08 95       	ret
						case DIO_u8_Pin1:
						SET_BIT(DIO_u8_PORTB_REG,1);
     716:	88 b3       	in	r24, 0x18	; 24
     718:	82 60       	ori	r24, 0x02	; 2
     71a:	88 bb       	out	0x18, r24	; 24
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     71c:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin0:
						SET_BIT(DIO_u8_PORTB_REG,0);
						break;
						case DIO_u8_Pin1:
						SET_BIT(DIO_u8_PORTB_REG,1);
						break;
     71e:	08 95       	ret
						case DIO_u8_Pin2:
						SET_BIT(DIO_u8_PORTB_REG,2);
     720:	88 b3       	in	r24, 0x18	; 24
     722:	84 60       	ori	r24, 0x04	; 4
     724:	88 bb       	out	0x18, r24	; 24
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     726:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin1:
						SET_BIT(DIO_u8_PORTB_REG,1);
						break;
						case DIO_u8_Pin2:
						SET_BIT(DIO_u8_PORTB_REG,2);
						break;
     728:	08 95       	ret
						case DIO_u8_Pin3:
						SET_BIT(DIO_u8_PORTB_REG,3);
     72a:	88 b3       	in	r24, 0x18	; 24
     72c:	88 60       	ori	r24, 0x08	; 8
     72e:	88 bb       	out	0x18, r24	; 24
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     730:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin2:
						SET_BIT(DIO_u8_PORTB_REG,2);
						break;
						case DIO_u8_Pin3:
						SET_BIT(DIO_u8_PORTB_REG,3);
						break;
     732:	08 95       	ret
						case DIO_u8_Pin4:
						SET_BIT(DIO_u8_PORTB_REG,4);
     734:	88 b3       	in	r24, 0x18	; 24
     736:	80 61       	ori	r24, 0x10	; 16
     738:	88 bb       	out	0x18, r24	; 24
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     73a:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin3:
						SET_BIT(DIO_u8_PORTB_REG,3);
						break;
						case DIO_u8_Pin4:
						SET_BIT(DIO_u8_PORTB_REG,4);
						break;
     73c:	08 95       	ret
						case DIO_u8_Pin5:
						SET_BIT(DIO_u8_PORTB_REG,5);
     73e:	88 b3       	in	r24, 0x18	; 24
     740:	80 62       	ori	r24, 0x20	; 32
     742:	88 bb       	out	0x18, r24	; 24
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     744:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin4:
						SET_BIT(DIO_u8_PORTB_REG,4);
						break;
						case DIO_u8_Pin5:
						SET_BIT(DIO_u8_PORTB_REG,5);
						break;
     746:	08 95       	ret
						case DIO_u8_Pin6:
						SET_BIT(DIO_u8_PORTB_REG,6);
     748:	88 b3       	in	r24, 0x18	; 24
     74a:	80 64       	ori	r24, 0x40	; 64
     74c:	88 bb       	out	0x18, r24	; 24
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     74e:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin5:
						SET_BIT(DIO_u8_PORTB_REG,5);
						break;
						case DIO_u8_Pin6:
						SET_BIT(DIO_u8_PORTB_REG,6);
						break;
     750:	08 95       	ret
						case DIO_u8_Pin7:
						SET_BIT(DIO_u8_PORTB_REG,7);
     752:	88 b3       	in	r24, 0x18	; 24
     754:	80 68       	ori	r24, 0x80	; 128
     756:	88 bb       	out	0x18, r24	; 24
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     758:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin6:
						SET_BIT(DIO_u8_PORTB_REG,6);
						break;
						case DIO_u8_Pin7:
						SET_BIT(DIO_u8_PORTB_REG,7);
						break;
     75a:	08 95       	ret
						default:
						Local_u8ErrorState = STD_TYPES_NOK;
					}
					break;
				case DIO_u8_PortC:
					switch(Copy_u8PinID){
     75c:	86 2f       	mov	r24, r22
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	fc 01       	movw	r30, r24
     762:	39 97       	sbiw	r30, 0x09	; 9
     764:	e8 30       	cpi	r30, 0x08	; 8
     766:	f1 05       	cpc	r31, r1
     768:	08 f0       	brcs	.+2      	; 0x76c <DIO_u8SetPinValue+0x108>
     76a:	46 c1       	rjmp	.+652    	; 0x9f8 <__stack+0x199>
     76c:	e6 5c       	subi	r30, 0xC6	; 198
     76e:	ff 4f       	sbci	r31, 0xFF	; 255
     770:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <__tablejump2__>
						case DIO_u8_Pin0:
						SET_BIT(DIO_u8_PORTC_REG,0);
     774:	85 b3       	in	r24, 0x15	; 21
     776:	81 60       	ori	r24, 0x01	; 1
     778:	85 bb       	out	0x15, r24	; 21
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     77a:	81 e0       	ldi	r24, 0x01	; 1
					break;
				case DIO_u8_PortC:
					switch(Copy_u8PinID){
						case DIO_u8_Pin0:
						SET_BIT(DIO_u8_PORTC_REG,0);
						break;
     77c:	08 95       	ret
						case DIO_u8_Pin1:
						SET_BIT(DIO_u8_PORTC_REG,1);
     77e:	85 b3       	in	r24, 0x15	; 21
     780:	82 60       	ori	r24, 0x02	; 2
     782:	85 bb       	out	0x15, r24	; 21
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     784:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin0:
						SET_BIT(DIO_u8_PORTC_REG,0);
						break;
						case DIO_u8_Pin1:
						SET_BIT(DIO_u8_PORTC_REG,1);
						break;
     786:	08 95       	ret
						case DIO_u8_Pin2:
						SET_BIT(DIO_u8_PORTC_REG,2);
     788:	85 b3       	in	r24, 0x15	; 21
     78a:	84 60       	ori	r24, 0x04	; 4
     78c:	85 bb       	out	0x15, r24	; 21
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     78e:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin1:
						SET_BIT(DIO_u8_PORTC_REG,1);
						break;
						case DIO_u8_Pin2:
						SET_BIT(DIO_u8_PORTC_REG,2);
						break;
     790:	08 95       	ret
						case DIO_u8_Pin3:
						SET_BIT(DIO_u8_PORTC_REG,3);
     792:	85 b3       	in	r24, 0x15	; 21
     794:	88 60       	ori	r24, 0x08	; 8
     796:	85 bb       	out	0x15, r24	; 21
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     798:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin2:
						SET_BIT(DIO_u8_PORTC_REG,2);
						break;
						case DIO_u8_Pin3:
						SET_BIT(DIO_u8_PORTC_REG,3);
						break;
     79a:	08 95       	ret
						case DIO_u8_Pin4:
						SET_BIT(DIO_u8_PORTC_REG,4);
     79c:	85 b3       	in	r24, 0x15	; 21
     79e:	80 61       	ori	r24, 0x10	; 16
     7a0:	85 bb       	out	0x15, r24	; 21
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     7a2:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin3:
						SET_BIT(DIO_u8_PORTC_REG,3);
						break;
						case DIO_u8_Pin4:
						SET_BIT(DIO_u8_PORTC_REG,4);
						break;
     7a4:	08 95       	ret
						case DIO_u8_Pin5:
						SET_BIT(DIO_u8_PORTC_REG,5);
     7a6:	85 b3       	in	r24, 0x15	; 21
     7a8:	80 62       	ori	r24, 0x20	; 32
     7aa:	85 bb       	out	0x15, r24	; 21
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     7ac:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin4:
						SET_BIT(DIO_u8_PORTC_REG,4);
						break;
						case DIO_u8_Pin5:
						SET_BIT(DIO_u8_PORTC_REG,5);
						break;
     7ae:	08 95       	ret
						case DIO_u8_Pin6:
						SET_BIT(DIO_u8_PORTC_REG,6);
     7b0:	85 b3       	in	r24, 0x15	; 21
     7b2:	80 64       	ori	r24, 0x40	; 64
     7b4:	85 bb       	out	0x15, r24	; 21
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     7b6:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin5:
						SET_BIT(DIO_u8_PORTC_REG,5);
						break;
						case DIO_u8_Pin6:
						SET_BIT(DIO_u8_PORTC_REG,6);
						break;
     7b8:	08 95       	ret
						case DIO_u8_Pin7:
						SET_BIT(DIO_u8_PORTC_REG,7);
     7ba:	85 b3       	in	r24, 0x15	; 21
     7bc:	80 68       	ori	r24, 0x80	; 128
     7be:	85 bb       	out	0x15, r24	; 21
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     7c0:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin6:
						SET_BIT(DIO_u8_PORTC_REG,6);
						break;
						case DIO_u8_Pin7:
						SET_BIT(DIO_u8_PORTC_REG,7);
						break;
     7c2:	08 95       	ret
						default:
						Local_u8ErrorState = STD_TYPES_NOK;
					}
					break;
				case DIO_u8_PortD:
					switch(Copy_u8PinID){
     7c4:	86 2f       	mov	r24, r22
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	fc 01       	movw	r30, r24
     7ca:	39 97       	sbiw	r30, 0x09	; 9
     7cc:	e8 30       	cpi	r30, 0x08	; 8
     7ce:	f1 05       	cpc	r31, r1
     7d0:	08 f0       	brcs	.+2      	; 0x7d4 <DIO_u8SetPinValue+0x170>
     7d2:	14 c1       	rjmp	.+552    	; 0x9fc <__stack+0x19d>
     7d4:	ee 5b       	subi	r30, 0xBE	; 190
     7d6:	ff 4f       	sbci	r31, 0xFF	; 255
     7d8:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <__tablejump2__>
						case DIO_u8_Pin0:
						SET_BIT(DIO_u8_PORTD_REG,0);
     7dc:	82 b3       	in	r24, 0x12	; 18
     7de:	81 60       	ori	r24, 0x01	; 1
     7e0:	82 bb       	out	0x12, r24	; 18
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     7e2:	81 e0       	ldi	r24, 0x01	; 1
					break;
				case DIO_u8_PortD:
					switch(Copy_u8PinID){
						case DIO_u8_Pin0:
						SET_BIT(DIO_u8_PORTD_REG,0);
						break;
     7e4:	08 95       	ret
						case DIO_u8_Pin1:
						SET_BIT(DIO_u8_PORTD_REG,1);
     7e6:	82 b3       	in	r24, 0x12	; 18
     7e8:	82 60       	ori	r24, 0x02	; 2
     7ea:	82 bb       	out	0x12, r24	; 18
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     7ec:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin0:
						SET_BIT(DIO_u8_PORTD_REG,0);
						break;
						case DIO_u8_Pin1:
						SET_BIT(DIO_u8_PORTD_REG,1);
						break;
     7ee:	08 95       	ret
						case DIO_u8_Pin2:
						SET_BIT(DIO_u8_PORTD_REG,2);
     7f0:	82 b3       	in	r24, 0x12	; 18
     7f2:	84 60       	ori	r24, 0x04	; 4
     7f4:	82 bb       	out	0x12, r24	; 18
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     7f6:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin1:
						SET_BIT(DIO_u8_PORTD_REG,1);
						break;
						case DIO_u8_Pin2:
						SET_BIT(DIO_u8_PORTD_REG,2);
						break;
     7f8:	08 95       	ret
						case DIO_u8_Pin3:
						SET_BIT(DIO_u8_PORTD_REG,3);
     7fa:	82 b3       	in	r24, 0x12	; 18
     7fc:	88 60       	ori	r24, 0x08	; 8
     7fe:	82 bb       	out	0x12, r24	; 18
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     800:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin2:
						SET_BIT(DIO_u8_PORTD_REG,2);
						break;
						case DIO_u8_Pin3:
						SET_BIT(DIO_u8_PORTD_REG,3);
						break;
     802:	08 95       	ret
						case DIO_u8_Pin4:
						SET_BIT(DIO_u8_PORTD_REG,4);
     804:	82 b3       	in	r24, 0x12	; 18
     806:	80 61       	ori	r24, 0x10	; 16
     808:	82 bb       	out	0x12, r24	; 18
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     80a:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin3:
						SET_BIT(DIO_u8_PORTD_REG,3);
						break;
						case DIO_u8_Pin4:
						SET_BIT(DIO_u8_PORTD_REG,4);
						break;
     80c:	08 95       	ret
						case DIO_u8_Pin5:
						SET_BIT(DIO_u8_PORTD_REG,5);
     80e:	82 b3       	in	r24, 0x12	; 18
     810:	80 62       	ori	r24, 0x20	; 32
     812:	82 bb       	out	0x12, r24	; 18
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     814:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin4:
						SET_BIT(DIO_u8_PORTD_REG,4);
						break;
						case DIO_u8_Pin5:
						SET_BIT(DIO_u8_PORTD_REG,5);
						break;
     816:	08 95       	ret
						case DIO_u8_Pin6:
						SET_BIT(DIO_u8_PORTD_REG,6);
     818:	82 b3       	in	r24, 0x12	; 18
     81a:	80 64       	ori	r24, 0x40	; 64
     81c:	82 bb       	out	0x12, r24	; 18
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     81e:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin5:
						SET_BIT(DIO_u8_PORTD_REG,5);
						break;
						case DIO_u8_Pin6:
						SET_BIT(DIO_u8_PORTD_REG,6);
						break;
     820:	08 95       	ret
						case DIO_u8_Pin7:
						SET_BIT(DIO_u8_PORTD_REG,7);
     822:	82 b3       	in	r24, 0x12	; 18
     824:	80 68       	ori	r24, 0x80	; 128
     826:	82 bb       	out	0x12, r24	; 18
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     828:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_u8_Pin6:
						SET_BIT(DIO_u8_PORTD_REG,6);
						break;
						case DIO_u8_Pin7:
						SET_BIT(DIO_u8_PORTD_REG,7);
						break;
     82a:	08 95       	ret
				default:
					Local_u8ErrorState = STD_TYPES_NOK;
			}
			break;
		case DIO_u8_LOW:
			switch(Copy_u8PortID){
     82c:	86 30       	cpi	r24, 0x06	; 6
     82e:	09 f4       	brne	.+2      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     830:	3f c0       	rjmp	.+126    	; 0x8b0 <__stack+0x51>
     832:	18 f4       	brcc	.+6      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     834:	85 30       	cpi	r24, 0x05	; 5
     836:	41 f0       	breq	.+16     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     838:	e3 c0       	rjmp	.+454    	; 0xa00 <__stack+0x1a1>
     83a:	87 30       	cpi	r24, 0x07	; 7
     83c:	09 f4       	brne	.+2      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     83e:	6c c0       	rjmp	.+216    	; 0x918 <__stack+0xb9>
     840:	88 30       	cpi	r24, 0x08	; 8
     842:	09 f4       	brne	.+2      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     844:	9d c0       	rjmp	.+314    	; 0x980 <__stack+0x121>
     846:	dc c0       	rjmp	.+440    	; 0xa00 <__stack+0x1a1>
				case DIO_u8_PortA:
				switch(Copy_u8PinID){
     848:	86 2f       	mov	r24, r22
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	fc 01       	movw	r30, r24
     84e:	39 97       	sbiw	r30, 0x09	; 9
     850:	e8 30       	cpi	r30, 0x08	; 8
     852:	f1 05       	cpc	r31, r1
     854:	08 f0       	brcs	.+2      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     856:	d6 c0       	rjmp	.+428    	; 0xa04 <__stack+0x1a5>
     858:	e6 5b       	subi	r30, 0xB6	; 182
     85a:	ff 4f       	sbci	r31, 0xFF	; 255
     85c:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <__tablejump2__>
					case DIO_u8_Pin0:
					CLR_BIT(DIO_u8_PORTA_REG,0);
     860:	8b b3       	in	r24, 0x1b	; 27
     862:	8e 7f       	andi	r24, 0xFE	; 254
     864:	8b bb       	out	0x1b, r24	; 27
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     866:	81 e0       	ldi	r24, 0x01	; 1
			switch(Copy_u8PortID){
				case DIO_u8_PortA:
				switch(Copy_u8PinID){
					case DIO_u8_Pin0:
					CLR_BIT(DIO_u8_PORTA_REG,0);
					break;
     868:	08 95       	ret
					case DIO_u8_Pin1:
					CLR_BIT(DIO_u8_PORTA_REG,1);
     86a:	8b b3       	in	r24, 0x1b	; 27
     86c:	8d 7f       	andi	r24, 0xFD	; 253
     86e:	8b bb       	out	0x1b, r24	; 27
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     870:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin0:
					CLR_BIT(DIO_u8_PORTA_REG,0);
					break;
					case DIO_u8_Pin1:
					CLR_BIT(DIO_u8_PORTA_REG,1);
					break;
     872:	08 95       	ret
					case DIO_u8_Pin2:
					CLR_BIT(DIO_u8_PORTA_REG,2);
     874:	8b b3       	in	r24, 0x1b	; 27
     876:	8b 7f       	andi	r24, 0xFB	; 251
     878:	8b bb       	out	0x1b, r24	; 27
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     87a:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin1:
					CLR_BIT(DIO_u8_PORTA_REG,1);
					break;
					case DIO_u8_Pin2:
					CLR_BIT(DIO_u8_PORTA_REG,2);
					break;
     87c:	08 95       	ret
					case DIO_u8_Pin3:
					CLR_BIT(DIO_u8_PORTA_REG,3);
     87e:	8b b3       	in	r24, 0x1b	; 27
     880:	87 7f       	andi	r24, 0xF7	; 247
     882:	8b bb       	out	0x1b, r24	; 27
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     884:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin2:
					CLR_BIT(DIO_u8_PORTA_REG,2);
					break;
					case DIO_u8_Pin3:
					CLR_BIT(DIO_u8_PORTA_REG,3);
					break;
     886:	08 95       	ret
					case DIO_u8_Pin4:
					CLR_BIT(DIO_u8_PORTA_REG,4);
     888:	8b b3       	in	r24, 0x1b	; 27
     88a:	8f 7e       	andi	r24, 0xEF	; 239
     88c:	8b bb       	out	0x1b, r24	; 27
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     88e:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin3:
					CLR_BIT(DIO_u8_PORTA_REG,3);
					break;
					case DIO_u8_Pin4:
					CLR_BIT(DIO_u8_PORTA_REG,4);
					break;
     890:	08 95       	ret
					case DIO_u8_Pin5:
					CLR_BIT(DIO_u8_PORTA_REG,5);
     892:	8b b3       	in	r24, 0x1b	; 27
     894:	8f 7d       	andi	r24, 0xDF	; 223
     896:	8b bb       	out	0x1b, r24	; 27
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     898:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin4:
					CLR_BIT(DIO_u8_PORTA_REG,4);
					break;
					case DIO_u8_Pin5:
					CLR_BIT(DIO_u8_PORTA_REG,5);
					break;
     89a:	08 95       	ret
					case DIO_u8_Pin6:
					CLR_BIT(DIO_u8_PORTA_REG,6);
     89c:	8b b3       	in	r24, 0x1b	; 27
     89e:	8f 7b       	andi	r24, 0xBF	; 191
     8a0:	8b bb       	out	0x1b, r24	; 27
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     8a2:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin5:
					CLR_BIT(DIO_u8_PORTA_REG,5);
					break;
					case DIO_u8_Pin6:
					CLR_BIT(DIO_u8_PORTA_REG,6);
					break;
     8a4:	08 95       	ret
					case DIO_u8_Pin7:
					CLR_BIT(DIO_u8_PORTA_REG,7);
     8a6:	8b b3       	in	r24, 0x1b	; 27
     8a8:	8f 77       	andi	r24, 0x7F	; 127
     8aa:	8b bb       	out	0x1b, r24	; 27
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     8ac:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin6:
					CLR_BIT(DIO_u8_PORTA_REG,6);
					break;
					case DIO_u8_Pin7:
					CLR_BIT(DIO_u8_PORTA_REG,7);
					break;
     8ae:	08 95       	ret
					default:
					Local_u8ErrorState = STD_TYPES_NOK;
				}
				break;
				case DIO_u8_PortB:
				switch(Copy_u8PinID){
     8b0:	86 2f       	mov	r24, r22
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	fc 01       	movw	r30, r24
     8b6:	39 97       	sbiw	r30, 0x09	; 9
     8b8:	e8 30       	cpi	r30, 0x08	; 8
     8ba:	f1 05       	cpc	r31, r1
     8bc:	08 f0       	brcs	.+2      	; 0x8c0 <__stack+0x61>
     8be:	a4 c0       	rjmp	.+328    	; 0xa08 <__stack+0x1a9>
     8c0:	ee 5a       	subi	r30, 0xAE	; 174
     8c2:	ff 4f       	sbci	r31, 0xFF	; 255
     8c4:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <__tablejump2__>
					case DIO_u8_Pin0:
					CLR_BIT(DIO_u8_PORTB_REG,0);
     8c8:	88 b3       	in	r24, 0x18	; 24
     8ca:	8e 7f       	andi	r24, 0xFE	; 254
     8cc:	88 bb       	out	0x18, r24	; 24
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     8ce:	81 e0       	ldi	r24, 0x01	; 1
				break;
				case DIO_u8_PortB:
				switch(Copy_u8PinID){
					case DIO_u8_Pin0:
					CLR_BIT(DIO_u8_PORTB_REG,0);
					break;
     8d0:	08 95       	ret
					case DIO_u8_Pin1:
					CLR_BIT(DIO_u8_PORTB_REG,1);
     8d2:	88 b3       	in	r24, 0x18	; 24
     8d4:	8d 7f       	andi	r24, 0xFD	; 253
     8d6:	88 bb       	out	0x18, r24	; 24
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     8d8:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin0:
					CLR_BIT(DIO_u8_PORTB_REG,0);
					break;
					case DIO_u8_Pin1:
					CLR_BIT(DIO_u8_PORTB_REG,1);
					break;
     8da:	08 95       	ret
					case DIO_u8_Pin2:
					CLR_BIT(DIO_u8_PORTB_REG,2);
     8dc:	88 b3       	in	r24, 0x18	; 24
     8de:	8b 7f       	andi	r24, 0xFB	; 251
     8e0:	88 bb       	out	0x18, r24	; 24
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     8e2:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin1:
					CLR_BIT(DIO_u8_PORTB_REG,1);
					break;
					case DIO_u8_Pin2:
					CLR_BIT(DIO_u8_PORTB_REG,2);
					break;
     8e4:	08 95       	ret
					case DIO_u8_Pin3:
					CLR_BIT(DIO_u8_PORTB_REG,3);
     8e6:	88 b3       	in	r24, 0x18	; 24
     8e8:	87 7f       	andi	r24, 0xF7	; 247
     8ea:	88 bb       	out	0x18, r24	; 24
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     8ec:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin2:
					CLR_BIT(DIO_u8_PORTB_REG,2);
					break;
					case DIO_u8_Pin3:
					CLR_BIT(DIO_u8_PORTB_REG,3);
					break;
     8ee:	08 95       	ret
					case DIO_u8_Pin4:
					CLR_BIT(DIO_u8_PORTB_REG,4);
     8f0:	88 b3       	in	r24, 0x18	; 24
     8f2:	8f 7e       	andi	r24, 0xEF	; 239
     8f4:	88 bb       	out	0x18, r24	; 24
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     8f6:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin3:
					CLR_BIT(DIO_u8_PORTB_REG,3);
					break;
					case DIO_u8_Pin4:
					CLR_BIT(DIO_u8_PORTB_REG,4);
					break;
     8f8:	08 95       	ret
					case DIO_u8_Pin5:
					CLR_BIT(DIO_u8_PORTB_REG,5);
     8fa:	88 b3       	in	r24, 0x18	; 24
     8fc:	8f 7d       	andi	r24, 0xDF	; 223
     8fe:	88 bb       	out	0x18, r24	; 24
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     900:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin4:
					CLR_BIT(DIO_u8_PORTB_REG,4);
					break;
					case DIO_u8_Pin5:
					CLR_BIT(DIO_u8_PORTB_REG,5);
					break;
     902:	08 95       	ret
					case DIO_u8_Pin6:
					CLR_BIT(DIO_u8_PORTB_REG,6);
     904:	88 b3       	in	r24, 0x18	; 24
     906:	8f 7b       	andi	r24, 0xBF	; 191
     908:	88 bb       	out	0x18, r24	; 24
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     90a:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin5:
					CLR_BIT(DIO_u8_PORTB_REG,5);
					break;
					case DIO_u8_Pin6:
					CLR_BIT(DIO_u8_PORTB_REG,6);
					break;
     90c:	08 95       	ret
					case DIO_u8_Pin7:
					CLR_BIT(DIO_u8_PORTB_REG,7);
     90e:	88 b3       	in	r24, 0x18	; 24
     910:	8f 77       	andi	r24, 0x7F	; 127
     912:	88 bb       	out	0x18, r24	; 24
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     914:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin6:
					CLR_BIT(DIO_u8_PORTB_REG,6);
					break;
					case DIO_u8_Pin7:
					CLR_BIT(DIO_u8_PORTB_REG,7);
					break;
     916:	08 95       	ret
					default:
					Local_u8ErrorState = STD_TYPES_NOK;
				}
				break;
				case DIO_u8_PortC:
				switch(Copy_u8PinID){
     918:	86 2f       	mov	r24, r22
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	fc 01       	movw	r30, r24
     91e:	39 97       	sbiw	r30, 0x09	; 9
     920:	e8 30       	cpi	r30, 0x08	; 8
     922:	f1 05       	cpc	r31, r1
     924:	08 f0       	brcs	.+2      	; 0x928 <__stack+0xc9>
     926:	72 c0       	rjmp	.+228    	; 0xa0c <__stack+0x1ad>
     928:	e6 5a       	subi	r30, 0xA6	; 166
     92a:	ff 4f       	sbci	r31, 0xFF	; 255
     92c:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <__tablejump2__>
					case DIO_u8_Pin0:
					CLR_BIT(DIO_u8_PORTC_REG,0);
     930:	85 b3       	in	r24, 0x15	; 21
     932:	8e 7f       	andi	r24, 0xFE	; 254
     934:	85 bb       	out	0x15, r24	; 21
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     936:	81 e0       	ldi	r24, 0x01	; 1
				break;
				case DIO_u8_PortC:
				switch(Copy_u8PinID){
					case DIO_u8_Pin0:
					CLR_BIT(DIO_u8_PORTC_REG,0);
					break;
     938:	08 95       	ret
					case DIO_u8_Pin1:
					CLR_BIT(DIO_u8_PORTC_REG,1);
     93a:	85 b3       	in	r24, 0x15	; 21
     93c:	8d 7f       	andi	r24, 0xFD	; 253
     93e:	85 bb       	out	0x15, r24	; 21
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     940:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin0:
					CLR_BIT(DIO_u8_PORTC_REG,0);
					break;
					case DIO_u8_Pin1:
					CLR_BIT(DIO_u8_PORTC_REG,1);
					break;
     942:	08 95       	ret
					case DIO_u8_Pin2:
					CLR_BIT(DIO_u8_PORTC_REG,2);
     944:	85 b3       	in	r24, 0x15	; 21
     946:	8b 7f       	andi	r24, 0xFB	; 251
     948:	85 bb       	out	0x15, r24	; 21
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     94a:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin1:
					CLR_BIT(DIO_u8_PORTC_REG,1);
					break;
					case DIO_u8_Pin2:
					CLR_BIT(DIO_u8_PORTC_REG,2);
					break;
     94c:	08 95       	ret
					case DIO_u8_Pin3:
					CLR_BIT(DIO_u8_PORTC_REG,3);
     94e:	85 b3       	in	r24, 0x15	; 21
     950:	87 7f       	andi	r24, 0xF7	; 247
     952:	85 bb       	out	0x15, r24	; 21
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     954:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin2:
					CLR_BIT(DIO_u8_PORTC_REG,2);
					break;
					case DIO_u8_Pin3:
					CLR_BIT(DIO_u8_PORTC_REG,3);
					break;
     956:	08 95       	ret
					case DIO_u8_Pin4:
					CLR_BIT(DIO_u8_PORTC_REG,4);
     958:	85 b3       	in	r24, 0x15	; 21
     95a:	8f 7e       	andi	r24, 0xEF	; 239
     95c:	85 bb       	out	0x15, r24	; 21
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     95e:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin3:
					CLR_BIT(DIO_u8_PORTC_REG,3);
					break;
					case DIO_u8_Pin4:
					CLR_BIT(DIO_u8_PORTC_REG,4);
					break;
     960:	08 95       	ret
					case DIO_u8_Pin5:
					CLR_BIT(DIO_u8_PORTC_REG,5);
     962:	85 b3       	in	r24, 0x15	; 21
     964:	8f 7d       	andi	r24, 0xDF	; 223
     966:	85 bb       	out	0x15, r24	; 21
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     968:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin4:
					CLR_BIT(DIO_u8_PORTC_REG,4);
					break;
					case DIO_u8_Pin5:
					CLR_BIT(DIO_u8_PORTC_REG,5);
					break;
     96a:	08 95       	ret
					case DIO_u8_Pin6:
					CLR_BIT(DIO_u8_PORTC_REG,6);
     96c:	85 b3       	in	r24, 0x15	; 21
     96e:	8f 7b       	andi	r24, 0xBF	; 191
     970:	85 bb       	out	0x15, r24	; 21
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     972:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin5:
					CLR_BIT(DIO_u8_PORTC_REG,5);
					break;
					case DIO_u8_Pin6:
					CLR_BIT(DIO_u8_PORTC_REG,6);
					break;
     974:	08 95       	ret
					case DIO_u8_Pin7:
					CLR_BIT(DIO_u8_PORTC_REG,7);
     976:	85 b3       	in	r24, 0x15	; 21
     978:	8f 77       	andi	r24, 0x7F	; 127
     97a:	85 bb       	out	0x15, r24	; 21
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     97c:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin6:
					CLR_BIT(DIO_u8_PORTC_REG,6);
					break;
					case DIO_u8_Pin7:
					CLR_BIT(DIO_u8_PORTC_REG,7);
					break;
     97e:	08 95       	ret
					default:
					Local_u8ErrorState = STD_TYPES_NOK;
				}
				break;
				case DIO_u8_PortD:
				switch(Copy_u8PinID){
     980:	86 2f       	mov	r24, r22
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	fc 01       	movw	r30, r24
     986:	39 97       	sbiw	r30, 0x09	; 9
     988:	e8 30       	cpi	r30, 0x08	; 8
     98a:	f1 05       	cpc	r31, r1
     98c:	08 f0       	brcs	.+2      	; 0x990 <__stack+0x131>
     98e:	40 c0       	rjmp	.+128    	; 0xa10 <__stack+0x1b1>
     990:	ee 59       	subi	r30, 0x9E	; 158
     992:	ff 4f       	sbci	r31, 0xFF	; 255
     994:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <__tablejump2__>
					case DIO_u8_Pin0:
					CLR_BIT(DIO_u8_PORTD_REG,0);
     998:	82 b3       	in	r24, 0x12	; 18
     99a:	8e 7f       	andi	r24, 0xFE	; 254
     99c:	82 bb       	out	0x12, r24	; 18
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     99e:	81 e0       	ldi	r24, 0x01	; 1
				break;
				case DIO_u8_PortD:
				switch(Copy_u8PinID){
					case DIO_u8_Pin0:
					CLR_BIT(DIO_u8_PORTD_REG,0);
					break;
     9a0:	08 95       	ret
					case DIO_u8_Pin1:
					CLR_BIT(DIO_u8_PORTD_REG,1);
     9a2:	82 b3       	in	r24, 0x12	; 18
     9a4:	8d 7f       	andi	r24, 0xFD	; 253
     9a6:	82 bb       	out	0x12, r24	; 18
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     9a8:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin0:
					CLR_BIT(DIO_u8_PORTD_REG,0);
					break;
					case DIO_u8_Pin1:
					CLR_BIT(DIO_u8_PORTD_REG,1);
					break;
     9aa:	08 95       	ret
					case DIO_u8_Pin2:
					CLR_BIT(DIO_u8_PORTD_REG,2);
     9ac:	82 b3       	in	r24, 0x12	; 18
     9ae:	8b 7f       	andi	r24, 0xFB	; 251
     9b0:	82 bb       	out	0x12, r24	; 18
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     9b2:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin1:
					CLR_BIT(DIO_u8_PORTD_REG,1);
					break;
					case DIO_u8_Pin2:
					CLR_BIT(DIO_u8_PORTD_REG,2);
					break;
     9b4:	08 95       	ret
					case DIO_u8_Pin3:
					CLR_BIT(DIO_u8_PORTD_REG,3);
     9b6:	82 b3       	in	r24, 0x12	; 18
     9b8:	87 7f       	andi	r24, 0xF7	; 247
     9ba:	82 bb       	out	0x12, r24	; 18
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     9bc:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin2:
					CLR_BIT(DIO_u8_PORTD_REG,2);
					break;
					case DIO_u8_Pin3:
					CLR_BIT(DIO_u8_PORTD_REG,3);
					break;
     9be:	08 95       	ret
					case DIO_u8_Pin4:
					CLR_BIT(DIO_u8_PORTD_REG,4);
     9c0:	82 b3       	in	r24, 0x12	; 18
     9c2:	8f 7e       	andi	r24, 0xEF	; 239
     9c4:	82 bb       	out	0x12, r24	; 18
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     9c6:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin3:
					CLR_BIT(DIO_u8_PORTD_REG,3);
					break;
					case DIO_u8_Pin4:
					CLR_BIT(DIO_u8_PORTD_REG,4);
					break;
     9c8:	08 95       	ret
					case DIO_u8_Pin5:
					CLR_BIT(DIO_u8_PORTD_REG,5);
     9ca:	82 b3       	in	r24, 0x12	; 18
     9cc:	8f 7d       	andi	r24, 0xDF	; 223
     9ce:	82 bb       	out	0x12, r24	; 18
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     9d0:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin4:
					CLR_BIT(DIO_u8_PORTD_REG,4);
					break;
					case DIO_u8_Pin5:
					CLR_BIT(DIO_u8_PORTD_REG,5);
					break;
     9d2:	08 95       	ret
					case DIO_u8_Pin6:
					CLR_BIT(DIO_u8_PORTD_REG,6);
     9d4:	82 b3       	in	r24, 0x12	; 18
     9d6:	8f 7b       	andi	r24, 0xBF	; 191
     9d8:	82 bb       	out	0x12, r24	; 18
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     9da:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin5:
					CLR_BIT(DIO_u8_PORTD_REG,5);
					break;
					case DIO_u8_Pin6:
					CLR_BIT(DIO_u8_PORTD_REG,6);
					break;
     9dc:	08 95       	ret
					case DIO_u8_Pin7:
					CLR_BIT(DIO_u8_PORTD_REG,7);
     9de:	82 b3       	in	r24, 0x12	; 18
     9e0:	8f 77       	andi	r24, 0x7F	; 127
     9e2:	82 bb       	out	0x12, r24	; 18
		Local_u8ErrorState = STD_TYPES_NOK;	
	}
	return Local_u8ErrorState;
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     9e4:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_Pin6:
					CLR_BIT(DIO_u8_PORTD_REG,6);
					break;
					case DIO_u8_Pin7:
					CLR_BIT(DIO_u8_PORTD_REG,7);
					break;
     9e6:	08 95       	ret
				default:
				Local_u8ErrorState = STD_TYPES_NOK;
			}
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	08 95       	ret
						default:
						Local_u8ErrorState = STD_TYPES_NOK;
					}
					break;
				default:
					Local_u8ErrorState = STD_TYPES_NOK;
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	08 95       	ret
							break;
						case DIO_u8_Pin7:
							SET_BIT(DIO_u8_PORTA_REG,7);
							break;
						default:
						Local_u8ErrorState = STD_TYPES_NOK;
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	08 95       	ret
						break;
						case DIO_u8_Pin7:
						SET_BIT(DIO_u8_PORTB_REG,7);
						break;
						default:
						Local_u8ErrorState = STD_TYPES_NOK;
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	08 95       	ret
						break;
						case DIO_u8_Pin7:
						SET_BIT(DIO_u8_PORTC_REG,7);
						break;
						default:
						Local_u8ErrorState = STD_TYPES_NOK;
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	08 95       	ret
						break;
						case DIO_u8_Pin7:
						SET_BIT(DIO_u8_PORTD_REG,7);
						break;
						default:
						Local_u8ErrorState = STD_TYPES_NOK;
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	08 95       	ret
					default:
					Local_u8ErrorState = STD_TYPES_NOK;
				}
				break;
				default:
				Local_u8ErrorState = STD_TYPES_NOK;
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	08 95       	ret
					break;
					case DIO_u8_Pin7:
					CLR_BIT(DIO_u8_PORTA_REG,7);
					break;
					default:
					Local_u8ErrorState = STD_TYPES_NOK;
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	08 95       	ret
					break;
					case DIO_u8_Pin7:
					CLR_BIT(DIO_u8_PORTB_REG,7);
					break;
					default:
					Local_u8ErrorState = STD_TYPES_NOK;
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	08 95       	ret
					break;
					case DIO_u8_Pin7:
					CLR_BIT(DIO_u8_PORTC_REG,7);
					break;
					default:
					Local_u8ErrorState = STD_TYPES_NOK;
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	08 95       	ret
					break;
					case DIO_u8_Pin7:
					CLR_BIT(DIO_u8_PORTD_REG,7);
					break;
					default:
					Local_u8ErrorState = STD_TYPES_NOK;
     a10:	80 e0       	ldi	r24, 0x00	; 0
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
     a12:	08 95       	ret

00000a14 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
     a14:	0f 93       	push	r16
     a16:	1f 93       	push	r17
	u8 Local_u8ErrorState = STD_TYPES_OK;
	if(Copy_pu8PinValue != NULL){	
     a18:	41 15       	cp	r20, r1
     a1a:	51 05       	cpc	r21, r1
     a1c:	09 f4       	brne	.+2      	; 0xa20 <DIO_u8GetPinValue+0xc>
     a1e:	54 c1       	rjmp	.+680    	; 0xcc8 <DIO_u8GetPinValue+0x2b4>
		switch(Copy_u8PinID){
     a20:	06 2f       	mov	r16, r22
     a22:	10 e0       	ldi	r17, 0x00	; 0
     a24:	f8 01       	movw	r30, r16
     a26:	39 97       	sbiw	r30, 0x09	; 9
     a28:	e8 30       	cpi	r30, 0x08	; 8
     a2a:	f1 05       	cpc	r31, r1
     a2c:	08 f0       	brcs	.+2      	; 0xa30 <DIO_u8GetPinValue+0x1c>
     a2e:	4e c1       	rjmp	.+668    	; 0xccc <DIO_u8GetPinValue+0x2b8>
     a30:	e6 59       	subi	r30, 0x96	; 150
     a32:	ff 4f       	sbci	r31, 0xFF	; 255
     a34:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <__tablejump2__>
			case DIO_u8_Pin0:
				switch(Copy_u8PortID){
     a38:	86 30       	cpi	r24, 0x06	; 6
     a3a:	79 f0       	breq	.+30     	; 0xa5a <DIO_u8GetPinValue+0x46>
     a3c:	18 f4       	brcc	.+6      	; 0xa44 <DIO_u8GetPinValue+0x30>
     a3e:	85 30       	cpi	r24, 0x05	; 5
     a40:	31 f0       	breq	.+12     	; 0xa4e <DIO_u8GetPinValue+0x3a>
     a42:	46 c1       	rjmp	.+652    	; 0xcd0 <DIO_u8GetPinValue+0x2bc>
     a44:	87 30       	cpi	r24, 0x07	; 7
     a46:	79 f0       	breq	.+30     	; 0xa66 <DIO_u8GetPinValue+0x52>
     a48:	88 30       	cpi	r24, 0x08	; 8
     a4a:	99 f0       	breq	.+38     	; 0xa72 <DIO_u8GetPinValue+0x5e>
     a4c:	41 c1       	rjmp	.+642    	; 0xcd0 <DIO_u8GetPinValue+0x2bc>
					case DIO_u8_PortA:
						*Copy_pu8PinValue = READ_BIT(DIO_u8_PINA_REG,0);
     a4e:	89 b3       	in	r24, 0x19	; 25
     a50:	81 70       	andi	r24, 0x01	; 1
     a52:	fa 01       	movw	r30, r20
     a54:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     a56:	81 e0       	ldi	r24, 0x01	; 1
		switch(Copy_u8PinID){
			case DIO_u8_Pin0:
				switch(Copy_u8PortID){
					case DIO_u8_PortA:
						*Copy_pu8PinValue = READ_BIT(DIO_u8_PINA_REG,0);
						break;
     a58:	4a c1       	rjmp	.+660    	; 0xcee <DIO_u8GetPinValue+0x2da>
					case DIO_u8_PortB:
						*Copy_pu8PinValue = READ_BIT(DIO_u8_PINB_REG,0);
     a5a:	86 b3       	in	r24, 0x16	; 22
     a5c:	81 70       	andi	r24, 0x01	; 1
     a5e:	fa 01       	movw	r30, r20
     a60:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     a62:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_PortA:
						*Copy_pu8PinValue = READ_BIT(DIO_u8_PINA_REG,0);
						break;
					case DIO_u8_PortB:
						*Copy_pu8PinValue = READ_BIT(DIO_u8_PINB_REG,0);
						break;
     a64:	44 c1       	rjmp	.+648    	; 0xcee <DIO_u8GetPinValue+0x2da>
					case DIO_u8_PortC:
						*Copy_pu8PinValue = READ_BIT(DIO_u8_PINC_REG,0);
     a66:	83 b3       	in	r24, 0x13	; 19
     a68:	81 70       	andi	r24, 0x01	; 1
     a6a:	fa 01       	movw	r30, r20
     a6c:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     a6e:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_PortB:
						*Copy_pu8PinValue = READ_BIT(DIO_u8_PINB_REG,0);
						break;
					case DIO_u8_PortC:
						*Copy_pu8PinValue = READ_BIT(DIO_u8_PINC_REG,0);
						break;
     a70:	3e c1       	rjmp	.+636    	; 0xcee <DIO_u8GetPinValue+0x2da>
					case DIO_u8_PortD:
						*Copy_pu8PinValue = READ_BIT(DIO_u8_PIND_REG,0);
     a72:	80 b3       	in	r24, 0x10	; 16
     a74:	81 70       	andi	r24, 0x01	; 1
     a76:	fa 01       	movw	r30, r20
     a78:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     a7a:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_PortC:
						*Copy_pu8PinValue = READ_BIT(DIO_u8_PINC_REG,0);
						break;
					case DIO_u8_PortD:
						*Copy_pu8PinValue = READ_BIT(DIO_u8_PIND_REG,0);
						break;
     a7c:	38 c1       	rjmp	.+624    	; 0xcee <DIO_u8GetPinValue+0x2da>
					default:
						Local_u8ErrorState = STD_TYPES_NOK;
				}
				break;
			case DIO_u8_Pin1:
				switch(Copy_u8PortID){
     a7e:	86 30       	cpi	r24, 0x06	; 6
     a80:	81 f0       	breq	.+32     	; 0xaa2 <DIO_u8GetPinValue+0x8e>
     a82:	18 f4       	brcc	.+6      	; 0xa8a <DIO_u8GetPinValue+0x76>
     a84:	85 30       	cpi	r24, 0x05	; 5
     a86:	31 f0       	breq	.+12     	; 0xa94 <DIO_u8GetPinValue+0x80>
     a88:	25 c1       	rjmp	.+586    	; 0xcd4 <DIO_u8GetPinValue+0x2c0>
     a8a:	87 30       	cpi	r24, 0x07	; 7
     a8c:	89 f0       	breq	.+34     	; 0xab0 <DIO_u8GetPinValue+0x9c>
     a8e:	88 30       	cpi	r24, 0x08	; 8
     a90:	b1 f0       	breq	.+44     	; 0xabe <DIO_u8GetPinValue+0xaa>
     a92:	20 c1       	rjmp	.+576    	; 0xcd4 <DIO_u8GetPinValue+0x2c0>
					case DIO_u8_PortA:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINA_REG,1);
     a94:	89 b3       	in	r24, 0x19	; 25
     a96:	86 95       	lsr	r24
     a98:	81 70       	andi	r24, 0x01	; 1
     a9a:	fa 01       	movw	r30, r20
     a9c:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     a9e:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case DIO_u8_Pin1:
				switch(Copy_u8PortID){
					case DIO_u8_PortA:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINA_REG,1);
					break;
     aa0:	26 c1       	rjmp	.+588    	; 0xcee <DIO_u8GetPinValue+0x2da>
					case DIO_u8_PortB:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINB_REG,1);
     aa2:	86 b3       	in	r24, 0x16	; 22
     aa4:	86 95       	lsr	r24
     aa6:	81 70       	andi	r24, 0x01	; 1
     aa8:	fa 01       	movw	r30, r20
     aaa:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     aac:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_PortA:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINA_REG,1);
					break;
					case DIO_u8_PortB:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINB_REG,1);
					break;
     aae:	1f c1       	rjmp	.+574    	; 0xcee <DIO_u8GetPinValue+0x2da>
					case DIO_u8_PortC:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINC_REG,1);
     ab0:	83 b3       	in	r24, 0x13	; 19
     ab2:	86 95       	lsr	r24
     ab4:	81 70       	andi	r24, 0x01	; 1
     ab6:	fa 01       	movw	r30, r20
     ab8:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     aba:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_PortB:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINB_REG,1);
					break;
					case DIO_u8_PortC:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINC_REG,1);
					break;
     abc:	18 c1       	rjmp	.+560    	; 0xcee <DIO_u8GetPinValue+0x2da>
					case DIO_u8_PortD:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PIND_REG,1);
     abe:	80 b3       	in	r24, 0x10	; 16
     ac0:	86 95       	lsr	r24
     ac2:	81 70       	andi	r24, 0x01	; 1
     ac4:	fa 01       	movw	r30, r20
     ac6:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     ac8:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_PortC:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINC_REG,1);
					break;
					case DIO_u8_PortD:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PIND_REG,1);
					break;
     aca:	11 c1       	rjmp	.+546    	; 0xcee <DIO_u8GetPinValue+0x2da>
					default:
					Local_u8ErrorState = STD_TYPES_NOK;
				}
				break;
			case DIO_u8_Pin2:
				switch(Copy_u8PortID){
     acc:	86 30       	cpi	r24, 0x06	; 6
     ace:	89 f0       	breq	.+34     	; 0xaf2 <DIO_u8GetPinValue+0xde>
     ad0:	18 f4       	brcc	.+6      	; 0xad8 <DIO_u8GetPinValue+0xc4>
     ad2:	85 30       	cpi	r24, 0x05	; 5
     ad4:	31 f0       	breq	.+12     	; 0xae2 <DIO_u8GetPinValue+0xce>
     ad6:	00 c1       	rjmp	.+512    	; 0xcd8 <DIO_u8GetPinValue+0x2c4>
     ad8:	87 30       	cpi	r24, 0x07	; 7
     ada:	99 f0       	breq	.+38     	; 0xb02 <DIO_u8GetPinValue+0xee>
     adc:	88 30       	cpi	r24, 0x08	; 8
     ade:	c9 f0       	breq	.+50     	; 0xb12 <DIO_u8GetPinValue+0xfe>
     ae0:	fb c0       	rjmp	.+502    	; 0xcd8 <DIO_u8GetPinValue+0x2c4>
					case DIO_u8_PortA:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINA_REG,2);
     ae2:	89 b3       	in	r24, 0x19	; 25
     ae4:	82 fb       	bst	r24, 2
     ae6:	88 27       	eor	r24, r24
     ae8:	80 f9       	bld	r24, 0
     aea:	fa 01       	movw	r30, r20
     aec:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     aee:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case DIO_u8_Pin2:
				switch(Copy_u8PortID){
					case DIO_u8_PortA:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINA_REG,2);
					break;
     af0:	fe c0       	rjmp	.+508    	; 0xcee <DIO_u8GetPinValue+0x2da>
					case DIO_u8_PortB:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINB_REG,2);
     af2:	86 b3       	in	r24, 0x16	; 22
     af4:	82 fb       	bst	r24, 2
     af6:	88 27       	eor	r24, r24
     af8:	80 f9       	bld	r24, 0
     afa:	fa 01       	movw	r30, r20
     afc:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     afe:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_PortA:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINA_REG,2);
					break;
					case DIO_u8_PortB:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINB_REG,2);
					break;
     b00:	f6 c0       	rjmp	.+492    	; 0xcee <DIO_u8GetPinValue+0x2da>
					case DIO_u8_PortC:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINC_REG,2);
     b02:	83 b3       	in	r24, 0x13	; 19
     b04:	82 fb       	bst	r24, 2
     b06:	88 27       	eor	r24, r24
     b08:	80 f9       	bld	r24, 0
     b0a:	fa 01       	movw	r30, r20
     b0c:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     b0e:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_PortB:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINB_REG,2);
					break;
					case DIO_u8_PortC:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINC_REG,2);
					break;
     b10:	ee c0       	rjmp	.+476    	; 0xcee <DIO_u8GetPinValue+0x2da>
					case DIO_u8_PortD:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PIND_REG,2);
     b12:	80 b3       	in	r24, 0x10	; 16
     b14:	82 fb       	bst	r24, 2
     b16:	88 27       	eor	r24, r24
     b18:	80 f9       	bld	r24, 0
     b1a:	fa 01       	movw	r30, r20
     b1c:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     b1e:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_PortC:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINC_REG,2);
					break;
					case DIO_u8_PortD:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PIND_REG,2);
					break;
     b20:	e6 c0       	rjmp	.+460    	; 0xcee <DIO_u8GetPinValue+0x2da>
					default:
					Local_u8ErrorState = STD_TYPES_NOK;
				}
				break;
			case DIO_u8_Pin3:
				switch(Copy_u8PortID){
     b22:	86 30       	cpi	r24, 0x06	; 6
     b24:	89 f0       	breq	.+34     	; 0xb48 <DIO_u8GetPinValue+0x134>
     b26:	18 f4       	brcc	.+6      	; 0xb2e <DIO_u8GetPinValue+0x11a>
     b28:	85 30       	cpi	r24, 0x05	; 5
     b2a:	31 f0       	breq	.+12     	; 0xb38 <DIO_u8GetPinValue+0x124>
     b2c:	d7 c0       	rjmp	.+430    	; 0xcdc <DIO_u8GetPinValue+0x2c8>
     b2e:	87 30       	cpi	r24, 0x07	; 7
     b30:	99 f0       	breq	.+38     	; 0xb58 <DIO_u8GetPinValue+0x144>
     b32:	88 30       	cpi	r24, 0x08	; 8
     b34:	c9 f0       	breq	.+50     	; 0xb68 <DIO_u8GetPinValue+0x154>
     b36:	d2 c0       	rjmp	.+420    	; 0xcdc <DIO_u8GetPinValue+0x2c8>
					case DIO_u8_PortA:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINA_REG,3);
     b38:	89 b3       	in	r24, 0x19	; 25
     b3a:	83 fb       	bst	r24, 3
     b3c:	88 27       	eor	r24, r24
     b3e:	80 f9       	bld	r24, 0
     b40:	fa 01       	movw	r30, r20
     b42:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     b44:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case DIO_u8_Pin3:
				switch(Copy_u8PortID){
					case DIO_u8_PortA:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINA_REG,3);
					break;
     b46:	d3 c0       	rjmp	.+422    	; 0xcee <DIO_u8GetPinValue+0x2da>
					case DIO_u8_PortB:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINB_REG,3);
     b48:	86 b3       	in	r24, 0x16	; 22
     b4a:	83 fb       	bst	r24, 3
     b4c:	88 27       	eor	r24, r24
     b4e:	80 f9       	bld	r24, 0
     b50:	fa 01       	movw	r30, r20
     b52:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     b54:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_PortA:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINA_REG,3);
					break;
					case DIO_u8_PortB:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINB_REG,3);
					break;
     b56:	cb c0       	rjmp	.+406    	; 0xcee <DIO_u8GetPinValue+0x2da>
					case DIO_u8_PortC:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINC_REG,3);
     b58:	83 b3       	in	r24, 0x13	; 19
     b5a:	83 fb       	bst	r24, 3
     b5c:	88 27       	eor	r24, r24
     b5e:	80 f9       	bld	r24, 0
     b60:	fa 01       	movw	r30, r20
     b62:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     b64:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_PortB:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINB_REG,3);
					break;
					case DIO_u8_PortC:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINC_REG,3);
					break;
     b66:	c3 c0       	rjmp	.+390    	; 0xcee <DIO_u8GetPinValue+0x2da>
					case DIO_u8_PortD:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PIND_REG,3);
     b68:	80 b3       	in	r24, 0x10	; 16
     b6a:	83 fb       	bst	r24, 3
     b6c:	88 27       	eor	r24, r24
     b6e:	80 f9       	bld	r24, 0
     b70:	fa 01       	movw	r30, r20
     b72:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     b74:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_PortC:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINC_REG,3);
					break;
					case DIO_u8_PortD:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PIND_REG,3);
					break;
     b76:	bb c0       	rjmp	.+374    	; 0xcee <DIO_u8GetPinValue+0x2da>
					default:
					Local_u8ErrorState = STD_TYPES_NOK;
				}
				break;
			case DIO_u8_Pin4:
				switch(Copy_u8PortID){
     b78:	86 30       	cpi	r24, 0x06	; 6
     b7a:	81 f0       	breq	.+32     	; 0xb9c <DIO_u8GetPinValue+0x188>
     b7c:	18 f4       	brcc	.+6      	; 0xb84 <DIO_u8GetPinValue+0x170>
     b7e:	85 30       	cpi	r24, 0x05	; 5
     b80:	31 f0       	breq	.+12     	; 0xb8e <DIO_u8GetPinValue+0x17a>
     b82:	ae c0       	rjmp	.+348    	; 0xce0 <DIO_u8GetPinValue+0x2cc>
     b84:	87 30       	cpi	r24, 0x07	; 7
     b86:	89 f0       	breq	.+34     	; 0xbaa <DIO_u8GetPinValue+0x196>
     b88:	88 30       	cpi	r24, 0x08	; 8
     b8a:	b1 f0       	breq	.+44     	; 0xbb8 <DIO_u8GetPinValue+0x1a4>
     b8c:	a9 c0       	rjmp	.+338    	; 0xce0 <DIO_u8GetPinValue+0x2cc>
					case DIO_u8_PortA:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINA_REG,4);
     b8e:	89 b3       	in	r24, 0x19	; 25
     b90:	82 95       	swap	r24
     b92:	81 70       	andi	r24, 0x01	; 1
     b94:	fa 01       	movw	r30, r20
     b96:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     b98:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case DIO_u8_Pin4:
				switch(Copy_u8PortID){
					case DIO_u8_PortA:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINA_REG,4);
					break;
     b9a:	a9 c0       	rjmp	.+338    	; 0xcee <DIO_u8GetPinValue+0x2da>
					case DIO_u8_PortB:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINB_REG,4);
     b9c:	86 b3       	in	r24, 0x16	; 22
     b9e:	82 95       	swap	r24
     ba0:	81 70       	andi	r24, 0x01	; 1
     ba2:	fa 01       	movw	r30, r20
     ba4:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     ba6:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_PortA:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINA_REG,4);
					break;
					case DIO_u8_PortB:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINB_REG,4);
					break;
     ba8:	a2 c0       	rjmp	.+324    	; 0xcee <DIO_u8GetPinValue+0x2da>
					case DIO_u8_PortC:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINC_REG,4);
     baa:	83 b3       	in	r24, 0x13	; 19
     bac:	82 95       	swap	r24
     bae:	81 70       	andi	r24, 0x01	; 1
     bb0:	fa 01       	movw	r30, r20
     bb2:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_PortB:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINB_REG,4);
					break;
					case DIO_u8_PortC:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINC_REG,4);
					break;
     bb6:	9b c0       	rjmp	.+310    	; 0xcee <DIO_u8GetPinValue+0x2da>
					case DIO_u8_PortD:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PIND_REG,4);
     bb8:	80 b3       	in	r24, 0x10	; 16
     bba:	82 95       	swap	r24
     bbc:	81 70       	andi	r24, 0x01	; 1
     bbe:	fa 01       	movw	r30, r20
     bc0:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     bc2:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_PortC:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINC_REG,4);
					break;
					case DIO_u8_PortD:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PIND_REG,4);
					break;
     bc4:	94 c0       	rjmp	.+296    	; 0xcee <DIO_u8GetPinValue+0x2da>
					default:
					Local_u8ErrorState = STD_TYPES_NOK;
				}
				break;
			case DIO_u8_Pin5:
				switch(Copy_u8PortID){
     bc6:	86 30       	cpi	r24, 0x06	; 6
     bc8:	89 f0       	breq	.+34     	; 0xbec <DIO_u8GetPinValue+0x1d8>
     bca:	18 f4       	brcc	.+6      	; 0xbd2 <DIO_u8GetPinValue+0x1be>
     bcc:	85 30       	cpi	r24, 0x05	; 5
     bce:	31 f0       	breq	.+12     	; 0xbdc <DIO_u8GetPinValue+0x1c8>
     bd0:	89 c0       	rjmp	.+274    	; 0xce4 <DIO_u8GetPinValue+0x2d0>
     bd2:	87 30       	cpi	r24, 0x07	; 7
     bd4:	99 f0       	breq	.+38     	; 0xbfc <DIO_u8GetPinValue+0x1e8>
     bd6:	88 30       	cpi	r24, 0x08	; 8
     bd8:	c9 f0       	breq	.+50     	; 0xc0c <DIO_u8GetPinValue+0x1f8>
     bda:	84 c0       	rjmp	.+264    	; 0xce4 <DIO_u8GetPinValue+0x2d0>
					case DIO_u8_PortA:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINA_REG,5);
     bdc:	89 b3       	in	r24, 0x19	; 25
     bde:	85 fb       	bst	r24, 5
     be0:	88 27       	eor	r24, r24
     be2:	80 f9       	bld	r24, 0
     be4:	fa 01       	movw	r30, r20
     be6:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     be8:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case DIO_u8_Pin5:
				switch(Copy_u8PortID){
					case DIO_u8_PortA:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINA_REG,5);
					break;
     bea:	81 c0       	rjmp	.+258    	; 0xcee <DIO_u8GetPinValue+0x2da>
					case DIO_u8_PortB:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINB_REG,5);
     bec:	86 b3       	in	r24, 0x16	; 22
     bee:	85 fb       	bst	r24, 5
     bf0:	88 27       	eor	r24, r24
     bf2:	80 f9       	bld	r24, 0
     bf4:	fa 01       	movw	r30, r20
     bf6:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_PortA:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINA_REG,5);
					break;
					case DIO_u8_PortB:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINB_REG,5);
					break;
     bfa:	79 c0       	rjmp	.+242    	; 0xcee <DIO_u8GetPinValue+0x2da>
					case DIO_u8_PortC:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINC_REG,5);
     bfc:	83 b3       	in	r24, 0x13	; 19
     bfe:	85 fb       	bst	r24, 5
     c00:	88 27       	eor	r24, r24
     c02:	80 f9       	bld	r24, 0
     c04:	fa 01       	movw	r30, r20
     c06:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     c08:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_PortB:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINB_REG,5);
					break;
					case DIO_u8_PortC:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINC_REG,5);
					break;
     c0a:	71 c0       	rjmp	.+226    	; 0xcee <DIO_u8GetPinValue+0x2da>
					case DIO_u8_PortD:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PIND_REG,5);
     c0c:	80 b3       	in	r24, 0x10	; 16
     c0e:	85 fb       	bst	r24, 5
     c10:	88 27       	eor	r24, r24
     c12:	80 f9       	bld	r24, 0
     c14:	fa 01       	movw	r30, r20
     c16:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     c18:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_PortC:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINC_REG,5);
					break;
					case DIO_u8_PortD:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PIND_REG,5);
					break;
     c1a:	69 c0       	rjmp	.+210    	; 0xcee <DIO_u8GetPinValue+0x2da>
					default:
					Local_u8ErrorState = STD_TYPES_NOK;
				}
				break;
			case DIO_u8_Pin6:
				switch(Copy_u8PortID){
     c1c:	86 30       	cpi	r24, 0x06	; 6
     c1e:	89 f0       	breq	.+34     	; 0xc42 <DIO_u8GetPinValue+0x22e>
     c20:	18 f4       	brcc	.+6      	; 0xc28 <DIO_u8GetPinValue+0x214>
     c22:	85 30       	cpi	r24, 0x05	; 5
     c24:	31 f0       	breq	.+12     	; 0xc32 <DIO_u8GetPinValue+0x21e>
     c26:	60 c0       	rjmp	.+192    	; 0xce8 <DIO_u8GetPinValue+0x2d4>
     c28:	87 30       	cpi	r24, 0x07	; 7
     c2a:	99 f0       	breq	.+38     	; 0xc52 <DIO_u8GetPinValue+0x23e>
     c2c:	88 30       	cpi	r24, 0x08	; 8
     c2e:	c9 f0       	breq	.+50     	; 0xc62 <DIO_u8GetPinValue+0x24e>
     c30:	5b c0       	rjmp	.+182    	; 0xce8 <DIO_u8GetPinValue+0x2d4>
					case DIO_u8_PortA:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINA_REG,6);
     c32:	89 b3       	in	r24, 0x19	; 25
     c34:	86 fb       	bst	r24, 6
     c36:	88 27       	eor	r24, r24
     c38:	80 f9       	bld	r24, 0
     c3a:	fa 01       	movw	r30, r20
     c3c:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     c3e:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case DIO_u8_Pin6:
				switch(Copy_u8PortID){
					case DIO_u8_PortA:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINA_REG,6);
					break;
     c40:	56 c0       	rjmp	.+172    	; 0xcee <DIO_u8GetPinValue+0x2da>
					case DIO_u8_PortB:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINB_REG,6);
     c42:	86 b3       	in	r24, 0x16	; 22
     c44:	86 fb       	bst	r24, 6
     c46:	88 27       	eor	r24, r24
     c48:	80 f9       	bld	r24, 0
     c4a:	fa 01       	movw	r30, r20
     c4c:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     c4e:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_PortA:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINA_REG,6);
					break;
					case DIO_u8_PortB:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINB_REG,6);
					break;
     c50:	4e c0       	rjmp	.+156    	; 0xcee <DIO_u8GetPinValue+0x2da>
					case DIO_u8_PortC:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINC_REG,6);
     c52:	83 b3       	in	r24, 0x13	; 19
     c54:	86 fb       	bst	r24, 6
     c56:	88 27       	eor	r24, r24
     c58:	80 f9       	bld	r24, 0
     c5a:	fa 01       	movw	r30, r20
     c5c:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     c5e:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_PortB:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINB_REG,6);
					break;
					case DIO_u8_PortC:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINC_REG,6);
					break;
     c60:	46 c0       	rjmp	.+140    	; 0xcee <DIO_u8GetPinValue+0x2da>
					case DIO_u8_PortD:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PIND_REG,6);
     c62:	80 b3       	in	r24, 0x10	; 16
     c64:	86 fb       	bst	r24, 6
     c66:	88 27       	eor	r24, r24
     c68:	80 f9       	bld	r24, 0
     c6a:	fa 01       	movw	r30, r20
     c6c:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     c6e:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_PortC:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINC_REG,6);
					break;
					case DIO_u8_PortD:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PIND_REG,6);
					break;
     c70:	3e c0       	rjmp	.+124    	; 0xcee <DIO_u8GetPinValue+0x2da>
					default:
					Local_u8ErrorState = STD_TYPES_NOK;
				}
				break;
			case DIO_u8_Pin7:
				switch(Copy_u8PortID){
     c72:	86 30       	cpi	r24, 0x06	; 6
     c74:	89 f0       	breq	.+34     	; 0xc98 <DIO_u8GetPinValue+0x284>
     c76:	18 f4       	brcc	.+6      	; 0xc7e <DIO_u8GetPinValue+0x26a>
     c78:	85 30       	cpi	r24, 0x05	; 5
     c7a:	31 f0       	breq	.+12     	; 0xc88 <DIO_u8GetPinValue+0x274>
     c7c:	37 c0       	rjmp	.+110    	; 0xcec <DIO_u8GetPinValue+0x2d8>
     c7e:	87 30       	cpi	r24, 0x07	; 7
     c80:	99 f0       	breq	.+38     	; 0xca8 <DIO_u8GetPinValue+0x294>
     c82:	88 30       	cpi	r24, 0x08	; 8
     c84:	c9 f0       	breq	.+50     	; 0xcb8 <DIO_u8GetPinValue+0x2a4>
     c86:	32 c0       	rjmp	.+100    	; 0xcec <DIO_u8GetPinValue+0x2d8>
					case DIO_u8_PortA:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINA_REG,7);
     c88:	89 b3       	in	r24, 0x19	; 25
     c8a:	88 1f       	adc	r24, r24
     c8c:	88 27       	eor	r24, r24
     c8e:	88 1f       	adc	r24, r24
     c90:	fa 01       	movw	r30, r20
     c92:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     c94:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case DIO_u8_Pin7:
				switch(Copy_u8PortID){
					case DIO_u8_PortA:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINA_REG,7);
					break;
     c96:	2b c0       	rjmp	.+86     	; 0xcee <DIO_u8GetPinValue+0x2da>
					case DIO_u8_PortB:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINB_REG,7);
     c98:	86 b3       	in	r24, 0x16	; 22
     c9a:	88 1f       	adc	r24, r24
     c9c:	88 27       	eor	r24, r24
     c9e:	88 1f       	adc	r24, r24
     ca0:	fa 01       	movw	r30, r20
     ca2:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_PortA:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINA_REG,7);
					break;
					case DIO_u8_PortB:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINB_REG,7);
					break;
     ca6:	23 c0       	rjmp	.+70     	; 0xcee <DIO_u8GetPinValue+0x2da>
					case DIO_u8_PortC:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINC_REG,7);
     ca8:	83 b3       	in	r24, 0x13	; 19
     caa:	88 1f       	adc	r24, r24
     cac:	88 27       	eor	r24, r24
     cae:	88 1f       	adc	r24, r24
     cb0:	fa 01       	movw	r30, r20
     cb2:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     cb4:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_PortB:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINB_REG,7);
					break;
					case DIO_u8_PortC:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINC_REG,7);
					break;
     cb6:	1b c0       	rjmp	.+54     	; 0xcee <DIO_u8GetPinValue+0x2da>
					case DIO_u8_PortD:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PIND_REG,7);
     cb8:	80 b3       	in	r24, 0x10	; 16
     cba:	88 1f       	adc	r24, r24
     cbc:	88 27       	eor	r24, r24
     cbe:	88 1f       	adc	r24, r24
     cc0:	fa 01       	movw	r30, r20
     cc2:	80 83       	st	Z, r24
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
					case DIO_u8_PortC:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PINC_REG,7);
					break;
					case DIO_u8_PortD:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PIND_REG,7);
					break;
     cc6:	13 c0       	rjmp	.+38     	; 0xcee <DIO_u8GetPinValue+0x2da>
			Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
}
u8 DIO_u8GetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8* Copy_pu8PinValue){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	11 c0       	rjmp	.+34     	; 0xcee <DIO_u8GetPinValue+0x2da>
					default:
					Local_u8ErrorState = STD_TYPES_NOK;
				}
				break;
			default:
			Local_u8ErrorState = STD_TYPES_NOK;
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	0f c0       	rjmp	.+30     	; 0xcee <DIO_u8GetPinValue+0x2da>
						break;
					case DIO_u8_PortD:
						*Copy_pu8PinValue = READ_BIT(DIO_u8_PIND_REG,0);
						break;
					default:
						Local_u8ErrorState = STD_TYPES_NOK;
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	0d c0       	rjmp	.+26     	; 0xcee <DIO_u8GetPinValue+0x2da>
					break;
					case DIO_u8_PortD:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PIND_REG,1);
					break;
					default:
					Local_u8ErrorState = STD_TYPES_NOK;
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	0b c0       	rjmp	.+22     	; 0xcee <DIO_u8GetPinValue+0x2da>
					break;
					case DIO_u8_PortD:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PIND_REG,2);
					break;
					default:
					Local_u8ErrorState = STD_TYPES_NOK;
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	09 c0       	rjmp	.+18     	; 0xcee <DIO_u8GetPinValue+0x2da>
					break;
					case DIO_u8_PortD:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PIND_REG,3);
					break;
					default:
					Local_u8ErrorState = STD_TYPES_NOK;
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	07 c0       	rjmp	.+14     	; 0xcee <DIO_u8GetPinValue+0x2da>
					break;
					case DIO_u8_PortD:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PIND_REG,4);
					break;
					default:
					Local_u8ErrorState = STD_TYPES_NOK;
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	05 c0       	rjmp	.+10     	; 0xcee <DIO_u8GetPinValue+0x2da>
					break;
					case DIO_u8_PortD:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PIND_REG,5);
					break;
					default:
					Local_u8ErrorState = STD_TYPES_NOK;
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	03 c0       	rjmp	.+6      	; 0xcee <DIO_u8GetPinValue+0x2da>
					break;
					case DIO_u8_PortD:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PIND_REG,6);
					break;
					default:
					Local_u8ErrorState = STD_TYPES_NOK;
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	01 c0       	rjmp	.+2      	; 0xcee <DIO_u8GetPinValue+0x2da>
					break;
					case DIO_u8_PortD:
					*Copy_pu8PinValue = READ_BIT(DIO_u8_PIND_REG,7);
					break;
					default:
					Local_u8ErrorState = STD_TYPES_NOK;
     cec:	80 e0       	ldi	r24, 0x00	; 0
			Local_u8ErrorState = STD_TYPES_NOK;
		
		}
	}
	return Local_u8ErrorState;
}
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	08 95       	ret

00000cf4 <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8PortID,u8 Copy_u8Value){
	u8 Local_u8ErrorState = STD_TYPES_OK;
	switch(Copy_u8PortID){
     cf4:	86 30       	cpi	r24, 0x06	; 6
     cf6:	61 f0       	breq	.+24     	; 0xd10 <DIO_u8SetPortValue+0x1c>
     cf8:	18 f4       	brcc	.+6      	; 0xd00 <DIO_u8SetPortValue+0xc>
     cfa:	85 30       	cpi	r24, 0x05	; 5
     cfc:	31 f0       	breq	.+12     	; 0xd0a <DIO_u8SetPortValue+0x16>
     cfe:	11 c0       	rjmp	.+34     	; 0xd22 <DIO_u8SetPortValue+0x2e>
     d00:	87 30       	cpi	r24, 0x07	; 7
     d02:	49 f0       	breq	.+18     	; 0xd16 <DIO_u8SetPortValue+0x22>
     d04:	88 30       	cpi	r24, 0x08	; 8
     d06:	51 f0       	breq	.+20     	; 0xd1c <DIO_u8SetPortValue+0x28>
     d08:	0c c0       	rjmp	.+24     	; 0xd22 <DIO_u8SetPortValue+0x2e>
		case DIO_u8_PortA:
			DIO_u8_PORTA_REG = Copy_u8Value;
     d0a:	6b bb       	out	0x1b, r22	; 27
	return Local_u8ErrorState;
}


u8 DIO_u8SetPortValue(u8 Copy_u8PortID,u8 Copy_u8Value){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     d0c:	81 e0       	ldi	r24, 0x01	; 1
	switch(Copy_u8PortID){
		case DIO_u8_PortA:
			DIO_u8_PORTA_REG = Copy_u8Value;
		break;
     d0e:	08 95       	ret
		case DIO_u8_PortB:
			DIO_u8_PORTB_REG = Copy_u8Value;
     d10:	68 bb       	out	0x18, r22	; 24
	return Local_u8ErrorState;
}


u8 DIO_u8SetPortValue(u8 Copy_u8PortID,u8 Copy_u8Value){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     d12:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_u8_PortA:
			DIO_u8_PORTA_REG = Copy_u8Value;
		break;
		case DIO_u8_PortB:
			DIO_u8_PORTB_REG = Copy_u8Value;
		break;
     d14:	08 95       	ret
		case DIO_u8_PortC:
			DIO_u8_PORTC_REG = Copy_u8Value;
     d16:	65 bb       	out	0x15, r22	; 21
	return Local_u8ErrorState;
}


u8 DIO_u8SetPortValue(u8 Copy_u8PortID,u8 Copy_u8Value){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     d18:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_u8_PortB:
			DIO_u8_PORTB_REG = Copy_u8Value;
		break;
		case DIO_u8_PortC:
			DIO_u8_PORTC_REG = Copy_u8Value;
		break;
     d1a:	08 95       	ret
		case DIO_u8_PortD:
			DIO_u8_PORTD_REG = Copy_u8Value;
     d1c:	62 bb       	out	0x12, r22	; 18
	return Local_u8ErrorState;
}


u8 DIO_u8SetPortValue(u8 Copy_u8PortID,u8 Copy_u8Value){
	u8 Local_u8ErrorState = STD_TYPES_OK;
     d1e:	81 e0       	ldi	r24, 0x01	; 1
		case DIO_u8_PortC:
			DIO_u8_PORTC_REG = Copy_u8Value;
		break;
		case DIO_u8_PortD:
			DIO_u8_PORTD_REG = Copy_u8Value;
		break;
     d20:	08 95       	ret
		default:
			Local_u8ErrorState = STD_TYPES_NOK;		
     d22:	80 e0       	ldi	r24, 0x00	; 0
	}
	return Local_u8ErrorState;
     d24:	08 95       	ret

00000d26 <__vector_1>:
		local_u8ErrorState = STD_TYPES_NOK;
	}
	return local_u8ErrorState;
}

void __vector_1 (void){
     d26:	1f 92       	push	r1
     d28:	0f 92       	push	r0
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	0f 92       	push	r0
     d2e:	11 24       	eor	r1, r1
     d30:	2f 93       	push	r18
     d32:	3f 93       	push	r19
     d34:	4f 93       	push	r20
     d36:	5f 93       	push	r21
     d38:	6f 93       	push	r22
     d3a:	7f 93       	push	r23
     d3c:	8f 93       	push	r24
     d3e:	9f 93       	push	r25
     d40:	af 93       	push	r26
     d42:	bf 93       	push	r27
     d44:	ef 93       	push	r30
     d46:	ff 93       	push	r31
	if(EXTI_ApfEXTI[0] != NULL){
     d48:	e0 91 cd 00 	lds	r30, 0x00CD	; 0x8000cd <EXTI_ApfEXTI>
     d4c:	f0 91 ce 00 	lds	r31, 0x00CE	; 0x8000ce <EXTI_ApfEXTI+0x1>
     d50:	30 97       	sbiw	r30, 0x00	; 0
     d52:	09 f0       	breq	.+2      	; 0xd56 <__vector_1+0x30>
		EXTI_ApfEXTI[0]();
     d54:	09 95       	icall
	}
}
     d56:	ff 91       	pop	r31
     d58:	ef 91       	pop	r30
     d5a:	bf 91       	pop	r27
     d5c:	af 91       	pop	r26
     d5e:	9f 91       	pop	r25
     d60:	8f 91       	pop	r24
     d62:	7f 91       	pop	r23
     d64:	6f 91       	pop	r22
     d66:	5f 91       	pop	r21
     d68:	4f 91       	pop	r20
     d6a:	3f 91       	pop	r19
     d6c:	2f 91       	pop	r18
     d6e:	0f 90       	pop	r0
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	0f 90       	pop	r0
     d74:	1f 90       	pop	r1
     d76:	18 95       	reti

00000d78 <__vector_2>:

void __vector_2 (void){
     d78:	1f 92       	push	r1
     d7a:	0f 92       	push	r0
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	0f 92       	push	r0
     d80:	11 24       	eor	r1, r1
     d82:	2f 93       	push	r18
     d84:	3f 93       	push	r19
     d86:	4f 93       	push	r20
     d88:	5f 93       	push	r21
     d8a:	6f 93       	push	r22
     d8c:	7f 93       	push	r23
     d8e:	8f 93       	push	r24
     d90:	9f 93       	push	r25
     d92:	af 93       	push	r26
     d94:	bf 93       	push	r27
     d96:	ef 93       	push	r30
     d98:	ff 93       	push	r31
	if(EXTI_ApfEXTI[1] != NULL){
     d9a:	e0 91 cf 00 	lds	r30, 0x00CF	; 0x8000cf <EXTI_ApfEXTI+0x2>
     d9e:	f0 91 d0 00 	lds	r31, 0x00D0	; 0x8000d0 <EXTI_ApfEXTI+0x3>
     da2:	30 97       	sbiw	r30, 0x00	; 0
     da4:	09 f0       	breq	.+2      	; 0xda8 <__vector_2+0x30>
		EXTI_ApfEXTI[1]();
     da6:	09 95       	icall
		
	}
}
     da8:	ff 91       	pop	r31
     daa:	ef 91       	pop	r30
     dac:	bf 91       	pop	r27
     dae:	af 91       	pop	r26
     db0:	9f 91       	pop	r25
     db2:	8f 91       	pop	r24
     db4:	7f 91       	pop	r23
     db6:	6f 91       	pop	r22
     db8:	5f 91       	pop	r21
     dba:	4f 91       	pop	r20
     dbc:	3f 91       	pop	r19
     dbe:	2f 91       	pop	r18
     dc0:	0f 90       	pop	r0
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	0f 90       	pop	r0
     dc6:	1f 90       	pop	r1
     dc8:	18 95       	reti

00000dca <__vector_3>:

void __vector_3 (void){
     dca:	1f 92       	push	r1
     dcc:	0f 92       	push	r0
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	0f 92       	push	r0
     dd2:	11 24       	eor	r1, r1
     dd4:	2f 93       	push	r18
     dd6:	3f 93       	push	r19
     dd8:	4f 93       	push	r20
     dda:	5f 93       	push	r21
     ddc:	6f 93       	push	r22
     dde:	7f 93       	push	r23
     de0:	8f 93       	push	r24
     de2:	9f 93       	push	r25
     de4:	af 93       	push	r26
     de6:	bf 93       	push	r27
     de8:	ef 93       	push	r30
     dea:	ff 93       	push	r31
	if(EXTI_ApfEXTI[2] != NULL){
     dec:	e0 91 d1 00 	lds	r30, 0x00D1	; 0x8000d1 <EXTI_ApfEXTI+0x4>
     df0:	f0 91 d2 00 	lds	r31, 0x00D2	; 0x8000d2 <EXTI_ApfEXTI+0x5>
     df4:	30 97       	sbiw	r30, 0x00	; 0
     df6:	09 f0       	breq	.+2      	; 0xdfa <__vector_3+0x30>
		EXTI_ApfEXTI[2]();
     df8:	09 95       	icall
	}
     dfa:	ff 91       	pop	r31
     dfc:	ef 91       	pop	r30
     dfe:	bf 91       	pop	r27
     e00:	af 91       	pop	r26
     e02:	9f 91       	pop	r25
     e04:	8f 91       	pop	r24
     e06:	7f 91       	pop	r23
     e08:	6f 91       	pop	r22
     e0a:	5f 91       	pop	r21
     e0c:	4f 91       	pop	r20
     e0e:	3f 91       	pop	r19
     e10:	2f 91       	pop	r18
     e12:	0f 90       	pop	r0
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	0f 90       	pop	r0
     e18:	1f 90       	pop	r1
     e1a:	18 95       	reti

00000e1c <GI_voidEnable>:
#include "GI_private.h"
#include "GI_interface.h"
#include "GI_config.h"

void GI_voidEnable(void){
	SET_BIT(GI_SREG_REG,7);
     e1c:	8f b7       	in	r24, 0x3f	; 63
     e1e:	80 68       	ori	r24, 0x80	; 128
     e20:	8f bf       	out	0x3f, r24	; 63
     e22:	08 95       	ret

00000e24 <TIMERS_voidTimer1Init>:
	TIMERS_u8_OCR0_REG = Copy_u8OCR0Value;
}


void TIMERS_voidTimer1SetCompareMatchValueA(u16 Copy_u16OCRValue){
	TIMERS_u16_OCR1A_REG = Copy_u16OCRValue;
     e24:	8f b5       	in	r24, 0x2f	; 47
     e26:	8e 7f       	andi	r24, 0xFE	; 254
     e28:	8f bd       	out	0x2f, r24	; 47
     e2a:	8f b5       	in	r24, 0x2f	; 47
     e2c:	82 60       	ori	r24, 0x02	; 2
     e2e:	8f bd       	out	0x2f, r24	; 47
     e30:	8e b5       	in	r24, 0x2e	; 46
     e32:	88 60       	ori	r24, 0x08	; 8
     e34:	8e bd       	out	0x2e, r24	; 46
     e36:	8e b5       	in	r24, 0x2e	; 46
     e38:	80 61       	ori	r24, 0x10	; 16
     e3a:	8e bd       	out	0x2e, r24	; 46
     e3c:	8f b5       	in	r24, 0x2f	; 47
     e3e:	8f 7b       	andi	r24, 0xBF	; 191
     e40:	8f bd       	out	0x2f, r24	; 47
     e42:	8f b5       	in	r24, 0x2f	; 47
     e44:	80 68       	ori	r24, 0x80	; 128
     e46:	8f bd       	out	0x2f, r24	; 47
     e48:	8f e1       	ldi	r24, 0x1F	; 31
     e4a:	9e e4       	ldi	r25, 0x4E	; 78
     e4c:	97 bd       	out	0x27, r25	; 39
     e4e:	86 bd       	out	0x26, r24	; 38
     e50:	8b ed       	ldi	r24, 0xDB	; 219
     e52:	95 e0       	ldi	r25, 0x05	; 5
     e54:	9b bd       	out	0x2b, r25	; 43
     e56:	8a bd       	out	0x2a, r24	; 42
     e58:	8e b5       	in	r24, 0x2e	; 46
     e5a:	81 60       	ori	r24, 0x01	; 1
     e5c:	8e bd       	out	0x2e, r24	; 46
     e5e:	8e b5       	in	r24, 0x2e	; 46
     e60:	8d 7f       	andi	r24, 0xFD	; 253
     e62:	8e bd       	out	0x2e, r24	; 46
     e64:	8e b5       	in	r24, 0x2e	; 46
     e66:	8b 7f       	andi	r24, 0xFB	; 251
     e68:	8e bd       	out	0x2e, r24	; 46
     e6a:	08 95       	ret

00000e6c <__vector_11>:
}



void __vector_11 (void) __attribute__((signal));
void __vector_11 (void){
     e6c:	1f 92       	push	r1
     e6e:	0f 92       	push	r0
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	0f 92       	push	r0
     e74:	11 24       	eor	r1, r1
     e76:	2f 93       	push	r18
     e78:	3f 93       	push	r19
     e7a:	4f 93       	push	r20
     e7c:	5f 93       	push	r21
     e7e:	6f 93       	push	r22
     e80:	7f 93       	push	r23
     e82:	8f 93       	push	r24
     e84:	9f 93       	push	r25
     e86:	af 93       	push	r26
     e88:	bf 93       	push	r27
     e8a:	ef 93       	push	r30
     e8c:	ff 93       	push	r31
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
     e8e:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <Local_u16CounterOVF.1633>
     e92:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <Local_u16CounterOVF.1633+0x1>
     e96:	01 96       	adiw	r24, 0x01	; 1
     e98:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <Local_u16CounterOVF.1633+0x1>
     e9c:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <Local_u16CounterOVF.1633>
	if(Local_u16CounterOVF == TIMER0_u8_NUMBER_OF_OVERFLOWS){
     ea0:	05 97       	sbiw	r24, 0x05	; 5
     ea2:	69 f4       	brne	.+26     	; 0xebe <__vector_11+0x52>
		/*update preload value*/
		TIMERS_u8_TCNT0_REG = TIMER0_u8_PRELOAD_VALUE;
     ea4:	87 ec       	ldi	r24, 0xC7	; 199
     ea6:	82 bf       	out	0x32, r24	; 50
		/* clear the OVF counter */
		Local_u16CounterOVF = 0;
     ea8:	10 92 d4 00 	sts	0x00D4, r1	; 0x8000d4 <Local_u16CounterOVF.1633+0x1>
     eac:	10 92 d3 00 	sts	0x00D3, r1	; 0x8000d3 <Local_u16CounterOVF.1633>
		/*call App function*/
		if(TIMERS_pfTimer0OVF != NULL){
     eb0:	e0 91 d5 00 	lds	r30, 0x00D5	; 0x8000d5 <TIMERS_pfTimer0OVF>
     eb4:	f0 91 d6 00 	lds	r31, 0x00D6	; 0x8000d6 <TIMERS_pfTimer0OVF+0x1>
     eb8:	30 97       	sbiw	r30, 0x00	; 0
     eba:	09 f0       	breq	.+2      	; 0xebe <__vector_11+0x52>
			TIMERS_pfTimer0OVF();
     ebc:	09 95       	icall
		}
		
	}
     ebe:	ff 91       	pop	r31
     ec0:	ef 91       	pop	r30
     ec2:	bf 91       	pop	r27
     ec4:	af 91       	pop	r26
     ec6:	9f 91       	pop	r25
     ec8:	8f 91       	pop	r24
     eca:	7f 91       	pop	r23
     ecc:	6f 91       	pop	r22
     ece:	5f 91       	pop	r21
     ed0:	4f 91       	pop	r20
     ed2:	3f 91       	pop	r19
     ed4:	2f 91       	pop	r18
     ed6:	0f 90       	pop	r0
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	0f 90       	pop	r0
     edc:	1f 90       	pop	r1
     ede:	18 95       	reti

00000ee0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     ee0:	0f 92       	push	r0
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	f8 94       	cli
     ee6:	0f 92       	push	r0
     ee8:	1f 92       	push	r1
     eea:	11 24       	eor	r1, r1
     eec:	2f 92       	push	r2
     eee:	3f 92       	push	r3
     ef0:	4f 92       	push	r4
     ef2:	5f 92       	push	r5
     ef4:	6f 92       	push	r6
     ef6:	7f 92       	push	r7
     ef8:	8f 92       	push	r8
     efa:	9f 92       	push	r9
     efc:	af 92       	push	r10
     efe:	bf 92       	push	r11
     f00:	cf 92       	push	r12
     f02:	df 92       	push	r13
     f04:	ef 92       	push	r14
     f06:	ff 92       	push	r15
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	2f 93       	push	r18
     f0e:	3f 93       	push	r19
     f10:	4f 93       	push	r20
     f12:	5f 93       	push	r21
     f14:	6f 93       	push	r22
     f16:	7f 93       	push	r23
     f18:	8f 93       	push	r24
     f1a:	9f 93       	push	r25
     f1c:	af 93       	push	r26
     f1e:	bf 93       	push	r27
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	ef 93       	push	r30
     f26:	ff 93       	push	r31
     f28:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <pxCurrentTCB>
     f2c:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <pxCurrentTCB+0x1>
     f30:	0d b6       	in	r0, 0x3d	; 61
     f32:	0d 92       	st	X+, r0
     f34:	0e b6       	in	r0, 0x3e	; 62
     f36:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     f38:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <xTaskIncrementTick>
     f3c:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     f3e:	0e 94 05 09 	call	0x120a	; 0x120a <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     f42:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <pxCurrentTCB>
     f46:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <pxCurrentTCB+0x1>
     f4a:	cd 91       	ld	r28, X+
     f4c:	cd bf       	out	0x3d, r28	; 61
     f4e:	dd 91       	ld	r29, X+
     f50:	de bf       	out	0x3e, r29	; 62
     f52:	ff 91       	pop	r31
     f54:	ef 91       	pop	r30
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	bf 91       	pop	r27
     f5c:	af 91       	pop	r26
     f5e:	9f 91       	pop	r25
     f60:	8f 91       	pop	r24
     f62:	7f 91       	pop	r23
     f64:	6f 91       	pop	r22
     f66:	5f 91       	pop	r21
     f68:	4f 91       	pop	r20
     f6a:	3f 91       	pop	r19
     f6c:	2f 91       	pop	r18
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	df 90       	pop	r13
     f78:	cf 90       	pop	r12
     f7a:	bf 90       	pop	r11
     f7c:	af 90       	pop	r10
     f7e:	9f 90       	pop	r9
     f80:	8f 90       	pop	r8
     f82:	7f 90       	pop	r7
     f84:	6f 90       	pop	r6
     f86:	5f 90       	pop	r5
     f88:	4f 90       	pop	r4
     f8a:	3f 90       	pop	r3
     f8c:	2f 90       	pop	r2
     f8e:	1f 90       	pop	r1
     f90:	0f 90       	pop	r0
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	0f 90       	pop	r0

	asm volatile ( "ret" );
     f96:	08 95       	ret

00000f98 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     f98:	0e 94 70 07 	call	0xee0	; 0xee0 <vPortYieldFromTick>
		asm volatile ( "reti" );
     f9c:	18 95       	reti

00000f9e <prvResetNextTaskUnblockTime>:
    }
    taskEXIT_CRITICAL();
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
     f9e:	e0 91 e3 00 	lds	r30, 0x00E3	; 0x8000e3 <pxDelayedTaskList>
     fa2:	f0 91 e4 00 	lds	r31, 0x00E4	; 0x8000e4 <pxDelayedTaskList+0x1>
     fa6:	80 81       	ld	r24, Z
     fa8:	81 11       	cpse	r24, r1
     faa:	07 c0       	rjmp	.+14     	; 0xfba <prvResetNextTaskUnblockTime+0x1c>
     fac:	8f ef       	ldi	r24, 0xFF	; 255
     fae:	9f ef       	ldi	r25, 0xFF	; 255
     fb0:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <xNextTaskUnblockTime+0x1>
     fb4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <xNextTaskUnblockTime>
     fb8:	08 95       	ret
     fba:	e0 91 e3 00 	lds	r30, 0x00E3	; 0x8000e3 <pxDelayedTaskList>
     fbe:	f0 91 e4 00 	lds	r31, 0x00E4	; 0x8000e4 <pxDelayedTaskList+0x1>
     fc2:	05 80       	ldd	r0, Z+5	; 0x05
     fc4:	f6 81       	ldd	r31, Z+6	; 0x06
     fc6:	e0 2d       	mov	r30, r0
     fc8:	80 81       	ld	r24, Z
     fca:	91 81       	ldd	r25, Z+1	; 0x01
     fcc:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <xNextTaskUnblockTime+0x1>
     fd0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <xNextTaskUnblockTime>
     fd4:	08 95       	ret

00000fd6 <xTaskIncrementTick>:
     fd6:	0f 93       	push	r16
     fd8:	1f 93       	push	r17
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <uxSchedulerSuspended>
     fe2:	81 11       	cpse	r24, r1
     fe4:	01 c1       	rjmp	.+514    	; 0x11e8 <xTaskIncrementTick+0x212>
     fe6:	c0 91 df 00 	lds	r28, 0x00DF	; 0x8000df <xTickCount>
     fea:	d0 91 e0 00 	lds	r29, 0x00E0	; 0x8000e0 <xTickCount+0x1>
     fee:	8e 01       	movw	r16, r28
     ff0:	0f 5f       	subi	r16, 0xFF	; 255
     ff2:	1f 4f       	sbci	r17, 0xFF	; 255
     ff4:	10 93 e0 00 	sts	0x00E0, r17	; 0x8000e0 <xTickCount+0x1>
     ff8:	00 93 df 00 	sts	0x00DF, r16	; 0x8000df <xTickCount>
     ffc:	01 15       	cp	r16, r1
     ffe:	11 05       	cpc	r17, r1
    1000:	b9 f4       	brne	.+46     	; 0x1030 <xTaskIncrementTick+0x5a>
    1002:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <pxDelayedTaskList>
    1006:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <pxDelayedTaskList+0x1>
    100a:	20 91 e1 00 	lds	r18, 0x00E1	; 0x8000e1 <pxOverflowDelayedTaskList>
    100e:	30 91 e2 00 	lds	r19, 0x00E2	; 0x8000e2 <pxOverflowDelayedTaskList+0x1>
    1012:	30 93 e4 00 	sts	0x00E4, r19	; 0x8000e4 <pxDelayedTaskList+0x1>
    1016:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <pxDelayedTaskList>
    101a:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <pxOverflowDelayedTaskList+0x1>
    101e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <pxOverflowDelayedTaskList>
    1022:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <xNumOfOverflows>
    1026:	8f 5f       	subi	r24, 0xFF	; 255
    1028:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <xNumOfOverflows>
    102c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <prvResetNextTaskUnblockTime>
    1030:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <xNextTaskUnblockTime>
    1034:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <xNextTaskUnblockTime+0x1>
    1038:	08 17       	cp	r16, r24
    103a:	19 07       	cpc	r17, r25
    103c:	20 f4       	brcc	.+8      	; 0x1046 <xTaskIncrementTick+0x70>
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	b8 c0       	rjmp	.+368    	; 0x11b2 <xTaskIncrementTick+0x1dc>
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	01 c0       	rjmp	.+2      	; 0x1048 <xTaskIncrementTick+0x72>
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	e0 91 e3 00 	lds	r30, 0x00E3	; 0x8000e3 <pxDelayedTaskList>
    104c:	f0 91 e4 00 	lds	r31, 0x00E4	; 0x8000e4 <pxDelayedTaskList+0x1>
    1050:	90 81       	ld	r25, Z
    1052:	91 11       	cpse	r25, r1
    1054:	07 c0       	rjmp	.+14     	; 0x1064 <xTaskIncrementTick+0x8e>
    1056:	2f ef       	ldi	r18, 0xFF	; 255
    1058:	3f ef       	ldi	r19, 0xFF	; 255
    105a:	30 93 d9 00 	sts	0x00D9, r19	; 0x8000d9 <xNextTaskUnblockTime+0x1>
    105e:	20 93 d8 00 	sts	0x00D8, r18	; 0x8000d8 <xNextTaskUnblockTime>
    1062:	a7 c0       	rjmp	.+334    	; 0x11b2 <xTaskIncrementTick+0x1dc>
    1064:	e0 91 e3 00 	lds	r30, 0x00E3	; 0x8000e3 <pxDelayedTaskList>
    1068:	f0 91 e4 00 	lds	r31, 0x00E4	; 0x8000e4 <pxDelayedTaskList+0x1>
    106c:	05 80       	ldd	r0, Z+5	; 0x05
    106e:	f6 81       	ldd	r31, Z+6	; 0x06
    1070:	e0 2d       	mov	r30, r0
    1072:	06 80       	ldd	r0, Z+6	; 0x06
    1074:	f7 81       	ldd	r31, Z+7	; 0x07
    1076:	e0 2d       	mov	r30, r0
    1078:	22 81       	ldd	r18, Z+2	; 0x02
    107a:	33 81       	ldd	r19, Z+3	; 0x03
    107c:	02 17       	cp	r16, r18
    107e:	13 07       	cpc	r17, r19
    1080:	28 f4       	brcc	.+10     	; 0x108c <xTaskIncrementTick+0xb6>
    1082:	30 93 d9 00 	sts	0x00D9, r19	; 0x8000d9 <xNextTaskUnblockTime+0x1>
    1086:	20 93 d8 00 	sts	0x00D8, r18	; 0x8000d8 <xNextTaskUnblockTime>
    108a:	93 c0       	rjmp	.+294    	; 0x11b2 <xTaskIncrementTick+0x1dc>
    108c:	a2 85       	ldd	r26, Z+10	; 0x0a
    108e:	b3 85       	ldd	r27, Z+11	; 0x0b
    1090:	24 81       	ldd	r18, Z+4	; 0x04
    1092:	35 81       	ldd	r19, Z+5	; 0x05
    1094:	46 81       	ldd	r20, Z+6	; 0x06
    1096:	57 81       	ldd	r21, Z+7	; 0x07
    1098:	e9 01       	movw	r28, r18
    109a:	5d 83       	std	Y+5, r21	; 0x05
    109c:	4c 83       	std	Y+4, r20	; 0x04
    109e:	26 81       	ldd	r18, Z+6	; 0x06
    10a0:	37 81       	ldd	r19, Z+7	; 0x07
    10a2:	44 81       	ldd	r20, Z+4	; 0x04
    10a4:	55 81       	ldd	r21, Z+5	; 0x05
    10a6:	e9 01       	movw	r28, r18
    10a8:	5b 83       	std	Y+3, r21	; 0x03
    10aa:	4a 83       	std	Y+2, r20	; 0x02
    10ac:	11 96       	adiw	r26, 0x01	; 1
    10ae:	2d 91       	ld	r18, X+
    10b0:	3c 91       	ld	r19, X
    10b2:	12 97       	sbiw	r26, 0x02	; 2
    10b4:	af 01       	movw	r20, r30
    10b6:	4e 5f       	subi	r20, 0xFE	; 254
    10b8:	5f 4f       	sbci	r21, 0xFF	; 255
    10ba:	24 17       	cp	r18, r20
    10bc:	35 07       	cpc	r19, r21
    10be:	31 f4       	brne	.+12     	; 0x10cc <xTaskIncrementTick+0xf6>
    10c0:	26 81       	ldd	r18, Z+6	; 0x06
    10c2:	37 81       	ldd	r19, Z+7	; 0x07
    10c4:	12 96       	adiw	r26, 0x02	; 2
    10c6:	3c 93       	st	X, r19
    10c8:	2e 93       	st	-X, r18
    10ca:	11 97       	sbiw	r26, 0x01	; 1
    10cc:	13 86       	std	Z+11, r1	; 0x0b
    10ce:	12 86       	std	Z+10, r1	; 0x0a
    10d0:	9c 91       	ld	r25, X
    10d2:	91 50       	subi	r25, 0x01	; 1
    10d4:	9c 93       	st	X, r25
    10d6:	a4 89       	ldd	r26, Z+20	; 0x14
    10d8:	b5 89       	ldd	r27, Z+21	; 0x15
    10da:	10 97       	sbiw	r26, 0x00	; 0
    10dc:	19 f1       	breq	.+70     	; 0x1124 <xTaskIncrementTick+0x14e>
    10de:	26 85       	ldd	r18, Z+14	; 0x0e
    10e0:	37 85       	ldd	r19, Z+15	; 0x0f
    10e2:	60 89       	ldd	r22, Z+16	; 0x10
    10e4:	71 89       	ldd	r23, Z+17	; 0x11
    10e6:	e9 01       	movw	r28, r18
    10e8:	7d 83       	std	Y+5, r23	; 0x05
    10ea:	6c 83       	std	Y+4, r22	; 0x04
    10ec:	20 89       	ldd	r18, Z+16	; 0x10
    10ee:	31 89       	ldd	r19, Z+17	; 0x11
    10f0:	66 85       	ldd	r22, Z+14	; 0x0e
    10f2:	77 85       	ldd	r23, Z+15	; 0x0f
    10f4:	e9 01       	movw	r28, r18
    10f6:	7b 83       	std	Y+3, r23	; 0x03
    10f8:	6a 83       	std	Y+2, r22	; 0x02
    10fa:	11 96       	adiw	r26, 0x01	; 1
    10fc:	6d 91       	ld	r22, X+
    10fe:	7c 91       	ld	r23, X
    1100:	12 97       	sbiw	r26, 0x02	; 2
    1102:	9f 01       	movw	r18, r30
    1104:	24 5f       	subi	r18, 0xF4	; 244
    1106:	3f 4f       	sbci	r19, 0xFF	; 255
    1108:	62 17       	cp	r22, r18
    110a:	73 07       	cpc	r23, r19
    110c:	31 f4       	brne	.+12     	; 0x111a <xTaskIncrementTick+0x144>
    110e:	20 89       	ldd	r18, Z+16	; 0x10
    1110:	31 89       	ldd	r19, Z+17	; 0x11
    1112:	12 96       	adiw	r26, 0x02	; 2
    1114:	3c 93       	st	X, r19
    1116:	2e 93       	st	-X, r18
    1118:	11 97       	sbiw	r26, 0x01	; 1
    111a:	15 8a       	std	Z+21, r1	; 0x15
    111c:	14 8a       	std	Z+20, r1	; 0x14
    111e:	9c 91       	ld	r25, X
    1120:	91 50       	subi	r25, 0x01	; 1
    1122:	9c 93       	st	X, r25
    1124:	26 89       	ldd	r18, Z+22	; 0x16
    1126:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <uxTopReadyPriority>
    112a:	92 17       	cp	r25, r18
    112c:	10 f4       	brcc	.+4      	; 0x1132 <xTaskIncrementTick+0x15c>
    112e:	20 93 de 00 	sts	0x00DE, r18	; 0x8000de <uxTopReadyPriority>
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	d9 01       	movw	r26, r18
    1136:	aa 0f       	add	r26, r26
    1138:	bb 1f       	adc	r27, r27
    113a:	aa 0f       	add	r26, r26
    113c:	bb 1f       	adc	r27, r27
    113e:	aa 0f       	add	r26, r26
    1140:	bb 1f       	adc	r27, r27
    1142:	2a 0f       	add	r18, r26
    1144:	3b 1f       	adc	r19, r27
    1146:	d9 01       	movw	r26, r18
    1148:	ab 51       	subi	r26, 0x1B	; 27
    114a:	bf 4f       	sbci	r27, 0xFF	; 255
    114c:	11 96       	adiw	r26, 0x01	; 1
    114e:	0d 90       	ld	r0, X+
    1150:	bc 91       	ld	r27, X
    1152:	a0 2d       	mov	r26, r0
    1154:	b5 83       	std	Z+5, r27	; 0x05
    1156:	a4 83       	std	Z+4, r26	; 0x04
    1158:	14 96       	adiw	r26, 0x04	; 4
    115a:	2d 91       	ld	r18, X+
    115c:	3c 91       	ld	r19, X
    115e:	15 97       	sbiw	r26, 0x05	; 5
    1160:	37 83       	std	Z+7, r19	; 0x07
    1162:	26 83       	std	Z+6, r18	; 0x06
    1164:	14 96       	adiw	r26, 0x04	; 4
    1166:	2d 91       	ld	r18, X+
    1168:	3c 91       	ld	r19, X
    116a:	15 97       	sbiw	r26, 0x05	; 5
    116c:	e9 01       	movw	r28, r18
    116e:	5b 83       	std	Y+3, r21	; 0x03
    1170:	4a 83       	std	Y+2, r20	; 0x02
    1172:	15 96       	adiw	r26, 0x05	; 5
    1174:	5c 93       	st	X, r21
    1176:	4e 93       	st	-X, r20
    1178:	14 97       	sbiw	r26, 0x04	; 4
    117a:	a6 89       	ldd	r26, Z+22	; 0x16
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	9d 01       	movw	r18, r26
    1180:	22 0f       	add	r18, r18
    1182:	33 1f       	adc	r19, r19
    1184:	22 0f       	add	r18, r18
    1186:	33 1f       	adc	r19, r19
    1188:	22 0f       	add	r18, r18
    118a:	33 1f       	adc	r19, r19
    118c:	a2 0f       	add	r26, r18
    118e:	b3 1f       	adc	r27, r19
    1190:	ab 51       	subi	r26, 0x1B	; 27
    1192:	bf 4f       	sbci	r27, 0xFF	; 255
    1194:	b3 87       	std	Z+11, r27	; 0x0b
    1196:	a2 87       	std	Z+10, r26	; 0x0a
    1198:	9c 91       	ld	r25, X
    119a:	9f 5f       	subi	r25, 0xFF	; 255
    119c:	9c 93       	st	X, r25
    119e:	26 89       	ldd	r18, Z+22	; 0x16
    11a0:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <pxCurrentTCB>
    11a4:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <pxCurrentTCB+0x1>
    11a8:	96 89       	ldd	r25, Z+22	; 0x16
    11aa:	92 17       	cp	r25, r18
    11ac:	08 f4       	brcc	.+2      	; 0x11b0 <xTaskIncrementTick+0x1da>
    11ae:	49 cf       	rjmp	.-366    	; 0x1042 <xTaskIncrementTick+0x6c>
    11b0:	4b cf       	rjmp	.-362    	; 0x1048 <xTaskIncrementTick+0x72>
    11b2:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <pxCurrentTCB>
    11b6:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <pxCurrentTCB+0x1>
    11ba:	26 89       	ldd	r18, Z+22	; 0x16
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	f9 01       	movw	r30, r18
    11c0:	ee 0f       	add	r30, r30
    11c2:	ff 1f       	adc	r31, r31
    11c4:	ee 0f       	add	r30, r30
    11c6:	ff 1f       	adc	r31, r31
    11c8:	ee 0f       	add	r30, r30
    11ca:	ff 1f       	adc	r31, r31
    11cc:	2e 0f       	add	r18, r30
    11ce:	3f 1f       	adc	r19, r31
    11d0:	f9 01       	movw	r30, r18
    11d2:	eb 51       	subi	r30, 0x1B	; 27
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	90 81       	ld	r25, Z
    11d8:	92 30       	cpi	r25, 0x02	; 2
    11da:	08 f0       	brcs	.+2      	; 0x11de <xTaskIncrementTick+0x208>
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <xYieldPending>
    11e2:	91 11       	cpse	r25, r1
    11e4:	0c c0       	rjmp	.+24     	; 0x11fe <xTaskIncrementTick+0x228>
    11e6:	0c c0       	rjmp	.+24     	; 0x1200 <xTaskIncrementTick+0x22a>
    11e8:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <xPendedTicks>
    11ec:	90 91 dd 00 	lds	r25, 0x00DD	; 0x8000dd <xPendedTicks+0x1>
    11f0:	01 96       	adiw	r24, 0x01	; 1
    11f2:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <xPendedTicks+0x1>
    11f6:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <xPendedTicks>
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	01 c0       	rjmp	.+2      	; 0x1200 <xTaskIncrementTick+0x22a>
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	df 91       	pop	r29
    1202:	cf 91       	pop	r28
    1204:	1f 91       	pop	r17
    1206:	0f 91       	pop	r16
    1208:	08 95       	ret

0000120a <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    120a:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <uxSchedulerSuspended>
    120e:	88 23       	and	r24, r24
    1210:	21 f0       	breq	.+8      	; 0x121a <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <xYieldPending>
    1218:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
    121a:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <xYieldPending>
        }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    121e:	20 91 de 00 	lds	r18, 0x00DE	; 0x8000de <uxTopReadyPriority>
    1222:	01 c0       	rjmp	.+2      	; 0x1226 <vTaskSwitchContext+0x1c>
    1224:	21 50       	subi	r18, 0x01	; 1
    1226:	82 2f       	mov	r24, r18
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	fc 01       	movw	r30, r24
    122c:	ee 0f       	add	r30, r30
    122e:	ff 1f       	adc	r31, r31
    1230:	ee 0f       	add	r30, r30
    1232:	ff 1f       	adc	r31, r31
    1234:	ee 0f       	add	r30, r30
    1236:	ff 1f       	adc	r31, r31
    1238:	e8 0f       	add	r30, r24
    123a:	f9 1f       	adc	r31, r25
    123c:	eb 51       	subi	r30, 0x1B	; 27
    123e:	ff 4f       	sbci	r31, 0xFF	; 255
    1240:	30 81       	ld	r19, Z
    1242:	33 23       	and	r19, r19
    1244:	79 f3       	breq	.-34     	; 0x1224 <vTaskSwitchContext+0x1a>
    1246:	ac 01       	movw	r20, r24
    1248:	44 0f       	add	r20, r20
    124a:	55 1f       	adc	r21, r21
    124c:	44 0f       	add	r20, r20
    124e:	55 1f       	adc	r21, r21
    1250:	44 0f       	add	r20, r20
    1252:	55 1f       	adc	r21, r21
    1254:	48 0f       	add	r20, r24
    1256:	59 1f       	adc	r21, r25
    1258:	df 01       	movw	r26, r30
    125a:	01 80       	ldd	r0, Z+1	; 0x01
    125c:	f2 81       	ldd	r31, Z+2	; 0x02
    125e:	e0 2d       	mov	r30, r0
    1260:	02 80       	ldd	r0, Z+2	; 0x02
    1262:	f3 81       	ldd	r31, Z+3	; 0x03
    1264:	e0 2d       	mov	r30, r0
    1266:	12 96       	adiw	r26, 0x02	; 2
    1268:	fc 93       	st	X, r31
    126a:	ee 93       	st	-X, r30
    126c:	11 97       	sbiw	r26, 0x01	; 1
    126e:	48 51       	subi	r20, 0x18	; 24
    1270:	5f 4f       	sbci	r21, 0xFF	; 255
    1272:	e4 17       	cp	r30, r20
    1274:	f5 07       	cpc	r31, r21
    1276:	29 f4       	brne	.+10     	; 0x1282 <vTaskSwitchContext+0x78>
    1278:	42 81       	ldd	r20, Z+2	; 0x02
    127a:	53 81       	ldd	r21, Z+3	; 0x03
    127c:	fd 01       	movw	r30, r26
    127e:	52 83       	std	Z+2, r21	; 0x02
    1280:	41 83       	std	Z+1, r20	; 0x01
    1282:	fc 01       	movw	r30, r24
    1284:	ee 0f       	add	r30, r30
    1286:	ff 1f       	adc	r31, r31
    1288:	ee 0f       	add	r30, r30
    128a:	ff 1f       	adc	r31, r31
    128c:	ee 0f       	add	r30, r30
    128e:	ff 1f       	adc	r31, r31
    1290:	8e 0f       	add	r24, r30
    1292:	9f 1f       	adc	r25, r31
    1294:	fc 01       	movw	r30, r24
    1296:	eb 51       	subi	r30, 0x1B	; 27
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	01 80       	ldd	r0, Z+1	; 0x01
    129c:	f2 81       	ldd	r31, Z+2	; 0x02
    129e:	e0 2d       	mov	r30, r0
    12a0:	86 81       	ldd	r24, Z+6	; 0x06
    12a2:	97 81       	ldd	r25, Z+7	; 0x07
    12a4:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <pxCurrentTCB+0x1>
    12a8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <pxCurrentTCB>
    12ac:	20 93 de 00 	sts	0x00DE, r18	; 0x8000de <uxTopReadyPriority>
    12b0:	08 95       	ret

000012b2 <__subsf3>:
    12b2:	50 58       	subi	r21, 0x80	; 128

000012b4 <__addsf3>:
    12b4:	bb 27       	eor	r27, r27
    12b6:	aa 27       	eor	r26, r26
    12b8:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__addsf3x>
    12bc:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <__fp_round>
    12c0:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fp_pscA>
    12c4:	38 f0       	brcs	.+14     	; 0x12d4 <__addsf3+0x20>
    12c6:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__fp_pscB>
    12ca:	20 f0       	brcs	.+8      	; 0x12d4 <__addsf3+0x20>
    12cc:	39 f4       	brne	.+14     	; 0x12dc <__addsf3+0x28>
    12ce:	9f 3f       	cpi	r25, 0xFF	; 255
    12d0:	19 f4       	brne	.+6      	; 0x12d8 <__addsf3+0x24>
    12d2:	26 f4       	brtc	.+8      	; 0x12dc <__addsf3+0x28>
    12d4:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__fp_nan>
    12d8:	0e f4       	brtc	.+2      	; 0x12dc <__addsf3+0x28>
    12da:	e0 95       	com	r30
    12dc:	e7 fb       	bst	r30, 7
    12de:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__fp_inf>

000012e2 <__addsf3x>:
    12e2:	e9 2f       	mov	r30, r25
    12e4:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__fp_split3>
    12e8:	58 f3       	brcs	.-42     	; 0x12c0 <__addsf3+0xc>
    12ea:	ba 17       	cp	r27, r26
    12ec:	62 07       	cpc	r22, r18
    12ee:	73 07       	cpc	r23, r19
    12f0:	84 07       	cpc	r24, r20
    12f2:	95 07       	cpc	r25, r21
    12f4:	20 f0       	brcs	.+8      	; 0x12fe <__addsf3x+0x1c>
    12f6:	79 f4       	brne	.+30     	; 0x1316 <__addsf3x+0x34>
    12f8:	a6 f5       	brtc	.+104    	; 0x1362 <__addsf3x+0x80>
    12fa:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <__fp_zero>
    12fe:	0e f4       	brtc	.+2      	; 0x1302 <__addsf3x+0x20>
    1300:	e0 95       	com	r30
    1302:	0b 2e       	mov	r0, r27
    1304:	ba 2f       	mov	r27, r26
    1306:	a0 2d       	mov	r26, r0
    1308:	0b 01       	movw	r0, r22
    130a:	b9 01       	movw	r22, r18
    130c:	90 01       	movw	r18, r0
    130e:	0c 01       	movw	r0, r24
    1310:	ca 01       	movw	r24, r20
    1312:	a0 01       	movw	r20, r0
    1314:	11 24       	eor	r1, r1
    1316:	ff 27       	eor	r31, r31
    1318:	59 1b       	sub	r21, r25
    131a:	99 f0       	breq	.+38     	; 0x1342 <__addsf3x+0x60>
    131c:	59 3f       	cpi	r21, 0xF9	; 249
    131e:	50 f4       	brcc	.+20     	; 0x1334 <__addsf3x+0x52>
    1320:	50 3e       	cpi	r21, 0xE0	; 224
    1322:	68 f1       	brcs	.+90     	; 0x137e <__addsf3x+0x9c>
    1324:	1a 16       	cp	r1, r26
    1326:	f0 40       	sbci	r31, 0x00	; 0
    1328:	a2 2f       	mov	r26, r18
    132a:	23 2f       	mov	r18, r19
    132c:	34 2f       	mov	r19, r20
    132e:	44 27       	eor	r20, r20
    1330:	58 5f       	subi	r21, 0xF8	; 248
    1332:	f3 cf       	rjmp	.-26     	; 0x131a <__addsf3x+0x38>
    1334:	46 95       	lsr	r20
    1336:	37 95       	ror	r19
    1338:	27 95       	ror	r18
    133a:	a7 95       	ror	r26
    133c:	f0 40       	sbci	r31, 0x00	; 0
    133e:	53 95       	inc	r21
    1340:	c9 f7       	brne	.-14     	; 0x1334 <__addsf3x+0x52>
    1342:	7e f4       	brtc	.+30     	; 0x1362 <__addsf3x+0x80>
    1344:	1f 16       	cp	r1, r31
    1346:	ba 0b       	sbc	r27, r26
    1348:	62 0b       	sbc	r22, r18
    134a:	73 0b       	sbc	r23, r19
    134c:	84 0b       	sbc	r24, r20
    134e:	ba f0       	brmi	.+46     	; 0x137e <__addsf3x+0x9c>
    1350:	91 50       	subi	r25, 0x01	; 1
    1352:	a1 f0       	breq	.+40     	; 0x137c <__addsf3x+0x9a>
    1354:	ff 0f       	add	r31, r31
    1356:	bb 1f       	adc	r27, r27
    1358:	66 1f       	adc	r22, r22
    135a:	77 1f       	adc	r23, r23
    135c:	88 1f       	adc	r24, r24
    135e:	c2 f7       	brpl	.-16     	; 0x1350 <__addsf3x+0x6e>
    1360:	0e c0       	rjmp	.+28     	; 0x137e <__addsf3x+0x9c>
    1362:	ba 0f       	add	r27, r26
    1364:	62 1f       	adc	r22, r18
    1366:	73 1f       	adc	r23, r19
    1368:	84 1f       	adc	r24, r20
    136a:	48 f4       	brcc	.+18     	; 0x137e <__addsf3x+0x9c>
    136c:	87 95       	ror	r24
    136e:	77 95       	ror	r23
    1370:	67 95       	ror	r22
    1372:	b7 95       	ror	r27
    1374:	f7 95       	ror	r31
    1376:	9e 3f       	cpi	r25, 0xFE	; 254
    1378:	08 f0       	brcs	.+2      	; 0x137c <__addsf3x+0x9a>
    137a:	b0 cf       	rjmp	.-160    	; 0x12dc <__addsf3+0x28>
    137c:	93 95       	inc	r25
    137e:	88 0f       	add	r24, r24
    1380:	08 f0       	brcs	.+2      	; 0x1384 <__addsf3x+0xa2>
    1382:	99 27       	eor	r25, r25
    1384:	ee 0f       	add	r30, r30
    1386:	97 95       	ror	r25
    1388:	87 95       	ror	r24
    138a:	08 95       	ret

0000138c <__divsf3>:
    138c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__divsf3x>
    1390:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <__fp_round>
    1394:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__fp_pscB>
    1398:	58 f0       	brcs	.+22     	; 0x13b0 <__divsf3+0x24>
    139a:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fp_pscA>
    139e:	40 f0       	brcs	.+16     	; 0x13b0 <__divsf3+0x24>
    13a0:	29 f4       	brne	.+10     	; 0x13ac <__divsf3+0x20>
    13a2:	5f 3f       	cpi	r21, 0xFF	; 255
    13a4:	29 f0       	breq	.+10     	; 0x13b0 <__divsf3+0x24>
    13a6:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__fp_inf>
    13aa:	51 11       	cpse	r21, r1
    13ac:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__fp_szero>
    13b0:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__fp_nan>

000013b4 <__divsf3x>:
    13b4:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__fp_split3>
    13b8:	68 f3       	brcs	.-38     	; 0x1394 <__divsf3+0x8>

000013ba <__divsf3_pse>:
    13ba:	99 23       	and	r25, r25
    13bc:	b1 f3       	breq	.-20     	; 0x13aa <__divsf3+0x1e>
    13be:	55 23       	and	r21, r21
    13c0:	91 f3       	breq	.-28     	; 0x13a6 <__divsf3+0x1a>
    13c2:	95 1b       	sub	r25, r21
    13c4:	55 0b       	sbc	r21, r21
    13c6:	bb 27       	eor	r27, r27
    13c8:	aa 27       	eor	r26, r26
    13ca:	62 17       	cp	r22, r18
    13cc:	73 07       	cpc	r23, r19
    13ce:	84 07       	cpc	r24, r20
    13d0:	38 f0       	brcs	.+14     	; 0x13e0 <__divsf3_pse+0x26>
    13d2:	9f 5f       	subi	r25, 0xFF	; 255
    13d4:	5f 4f       	sbci	r21, 0xFF	; 255
    13d6:	22 0f       	add	r18, r18
    13d8:	33 1f       	adc	r19, r19
    13da:	44 1f       	adc	r20, r20
    13dc:	aa 1f       	adc	r26, r26
    13de:	a9 f3       	breq	.-22     	; 0x13ca <__divsf3_pse+0x10>
    13e0:	35 d0       	rcall	.+106    	; 0x144c <__divsf3_pse+0x92>
    13e2:	0e 2e       	mov	r0, r30
    13e4:	3a f0       	brmi	.+14     	; 0x13f4 <__divsf3_pse+0x3a>
    13e6:	e0 e8       	ldi	r30, 0x80	; 128
    13e8:	32 d0       	rcall	.+100    	; 0x144e <__divsf3_pse+0x94>
    13ea:	91 50       	subi	r25, 0x01	; 1
    13ec:	50 40       	sbci	r21, 0x00	; 0
    13ee:	e6 95       	lsr	r30
    13f0:	00 1c       	adc	r0, r0
    13f2:	ca f7       	brpl	.-14     	; 0x13e6 <__divsf3_pse+0x2c>
    13f4:	2b d0       	rcall	.+86     	; 0x144c <__divsf3_pse+0x92>
    13f6:	fe 2f       	mov	r31, r30
    13f8:	29 d0       	rcall	.+82     	; 0x144c <__divsf3_pse+0x92>
    13fa:	66 0f       	add	r22, r22
    13fc:	77 1f       	adc	r23, r23
    13fe:	88 1f       	adc	r24, r24
    1400:	bb 1f       	adc	r27, r27
    1402:	26 17       	cp	r18, r22
    1404:	37 07       	cpc	r19, r23
    1406:	48 07       	cpc	r20, r24
    1408:	ab 07       	cpc	r26, r27
    140a:	b0 e8       	ldi	r27, 0x80	; 128
    140c:	09 f0       	breq	.+2      	; 0x1410 <__divsf3_pse+0x56>
    140e:	bb 0b       	sbc	r27, r27
    1410:	80 2d       	mov	r24, r0
    1412:	bf 01       	movw	r22, r30
    1414:	ff 27       	eor	r31, r31
    1416:	93 58       	subi	r25, 0x83	; 131
    1418:	5f 4f       	sbci	r21, 0xFF	; 255
    141a:	3a f0       	brmi	.+14     	; 0x142a <__divsf3_pse+0x70>
    141c:	9e 3f       	cpi	r25, 0xFE	; 254
    141e:	51 05       	cpc	r21, r1
    1420:	78 f0       	brcs	.+30     	; 0x1440 <__divsf3_pse+0x86>
    1422:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__fp_inf>
    1426:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__fp_szero>
    142a:	5f 3f       	cpi	r21, 0xFF	; 255
    142c:	e4 f3       	brlt	.-8      	; 0x1426 <__divsf3_pse+0x6c>
    142e:	98 3e       	cpi	r25, 0xE8	; 232
    1430:	d4 f3       	brlt	.-12     	; 0x1426 <__divsf3_pse+0x6c>
    1432:	86 95       	lsr	r24
    1434:	77 95       	ror	r23
    1436:	67 95       	ror	r22
    1438:	b7 95       	ror	r27
    143a:	f7 95       	ror	r31
    143c:	9f 5f       	subi	r25, 0xFF	; 255
    143e:	c9 f7       	brne	.-14     	; 0x1432 <__divsf3_pse+0x78>
    1440:	88 0f       	add	r24, r24
    1442:	91 1d       	adc	r25, r1
    1444:	96 95       	lsr	r25
    1446:	87 95       	ror	r24
    1448:	97 f9       	bld	r25, 7
    144a:	08 95       	ret
    144c:	e1 e0       	ldi	r30, 0x01	; 1
    144e:	66 0f       	add	r22, r22
    1450:	77 1f       	adc	r23, r23
    1452:	88 1f       	adc	r24, r24
    1454:	bb 1f       	adc	r27, r27
    1456:	62 17       	cp	r22, r18
    1458:	73 07       	cpc	r23, r19
    145a:	84 07       	cpc	r24, r20
    145c:	ba 07       	cpc	r27, r26
    145e:	20 f0       	brcs	.+8      	; 0x1468 <__divsf3_pse+0xae>
    1460:	62 1b       	sub	r22, r18
    1462:	73 0b       	sbc	r23, r19
    1464:	84 0b       	sbc	r24, r20
    1466:	ba 0b       	sbc	r27, r26
    1468:	ee 1f       	adc	r30, r30
    146a:	88 f7       	brcc	.-30     	; 0x144e <__divsf3_pse+0x94>
    146c:	e0 95       	com	r30
    146e:	08 95       	ret

00001470 <__fixunssfsi>:
    1470:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__fp_splitA>
    1474:	88 f0       	brcs	.+34     	; 0x1498 <__fixunssfsi+0x28>
    1476:	9f 57       	subi	r25, 0x7F	; 127
    1478:	98 f0       	brcs	.+38     	; 0x14a0 <__fixunssfsi+0x30>
    147a:	b9 2f       	mov	r27, r25
    147c:	99 27       	eor	r25, r25
    147e:	b7 51       	subi	r27, 0x17	; 23
    1480:	b0 f0       	brcs	.+44     	; 0x14ae <__fixunssfsi+0x3e>
    1482:	e1 f0       	breq	.+56     	; 0x14bc <__fixunssfsi+0x4c>
    1484:	66 0f       	add	r22, r22
    1486:	77 1f       	adc	r23, r23
    1488:	88 1f       	adc	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	1a f0       	brmi	.+6      	; 0x1494 <__fixunssfsi+0x24>
    148e:	ba 95       	dec	r27
    1490:	c9 f7       	brne	.-14     	; 0x1484 <__fixunssfsi+0x14>
    1492:	14 c0       	rjmp	.+40     	; 0x14bc <__fixunssfsi+0x4c>
    1494:	b1 30       	cpi	r27, 0x01	; 1
    1496:	91 f0       	breq	.+36     	; 0x14bc <__fixunssfsi+0x4c>
    1498:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__fp_zero>
    149c:	b1 e0       	ldi	r27, 0x01	; 1
    149e:	08 95       	ret
    14a0:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <__fp_zero>
    14a4:	67 2f       	mov	r22, r23
    14a6:	78 2f       	mov	r23, r24
    14a8:	88 27       	eor	r24, r24
    14aa:	b8 5f       	subi	r27, 0xF8	; 248
    14ac:	39 f0       	breq	.+14     	; 0x14bc <__fixunssfsi+0x4c>
    14ae:	b9 3f       	cpi	r27, 0xF9	; 249
    14b0:	cc f3       	brlt	.-14     	; 0x14a4 <__fixunssfsi+0x34>
    14b2:	86 95       	lsr	r24
    14b4:	77 95       	ror	r23
    14b6:	67 95       	ror	r22
    14b8:	b3 95       	inc	r27
    14ba:	d9 f7       	brne	.-10     	; 0x14b2 <__fixunssfsi+0x42>
    14bc:	3e f4       	brtc	.+14     	; 0x14cc <__fixunssfsi+0x5c>
    14be:	90 95       	com	r25
    14c0:	80 95       	com	r24
    14c2:	70 95       	com	r23
    14c4:	61 95       	neg	r22
    14c6:	7f 4f       	sbci	r23, 0xFF	; 255
    14c8:	8f 4f       	sbci	r24, 0xFF	; 255
    14ca:	9f 4f       	sbci	r25, 0xFF	; 255
    14cc:	08 95       	ret

000014ce <__floatunsisf>:
    14ce:	e8 94       	clt
    14d0:	09 c0       	rjmp	.+18     	; 0x14e4 <__floatsisf+0x12>

000014d2 <__floatsisf>:
    14d2:	97 fb       	bst	r25, 7
    14d4:	3e f4       	brtc	.+14     	; 0x14e4 <__floatsisf+0x12>
    14d6:	90 95       	com	r25
    14d8:	80 95       	com	r24
    14da:	70 95       	com	r23
    14dc:	61 95       	neg	r22
    14de:	7f 4f       	sbci	r23, 0xFF	; 255
    14e0:	8f 4f       	sbci	r24, 0xFF	; 255
    14e2:	9f 4f       	sbci	r25, 0xFF	; 255
    14e4:	99 23       	and	r25, r25
    14e6:	a9 f0       	breq	.+42     	; 0x1512 <__floatsisf+0x40>
    14e8:	f9 2f       	mov	r31, r25
    14ea:	96 e9       	ldi	r25, 0x96	; 150
    14ec:	bb 27       	eor	r27, r27
    14ee:	93 95       	inc	r25
    14f0:	f6 95       	lsr	r31
    14f2:	87 95       	ror	r24
    14f4:	77 95       	ror	r23
    14f6:	67 95       	ror	r22
    14f8:	b7 95       	ror	r27
    14fa:	f1 11       	cpse	r31, r1
    14fc:	f8 cf       	rjmp	.-16     	; 0x14ee <__floatsisf+0x1c>
    14fe:	fa f4       	brpl	.+62     	; 0x153e <__floatsisf+0x6c>
    1500:	bb 0f       	add	r27, r27
    1502:	11 f4       	brne	.+4      	; 0x1508 <__floatsisf+0x36>
    1504:	60 ff       	sbrs	r22, 0
    1506:	1b c0       	rjmp	.+54     	; 0x153e <__floatsisf+0x6c>
    1508:	6f 5f       	subi	r22, 0xFF	; 255
    150a:	7f 4f       	sbci	r23, 0xFF	; 255
    150c:	8f 4f       	sbci	r24, 0xFF	; 255
    150e:	9f 4f       	sbci	r25, 0xFF	; 255
    1510:	16 c0       	rjmp	.+44     	; 0x153e <__floatsisf+0x6c>
    1512:	88 23       	and	r24, r24
    1514:	11 f0       	breq	.+4      	; 0x151a <__floatsisf+0x48>
    1516:	96 e9       	ldi	r25, 0x96	; 150
    1518:	11 c0       	rjmp	.+34     	; 0x153c <__floatsisf+0x6a>
    151a:	77 23       	and	r23, r23
    151c:	21 f0       	breq	.+8      	; 0x1526 <__floatsisf+0x54>
    151e:	9e e8       	ldi	r25, 0x8E	; 142
    1520:	87 2f       	mov	r24, r23
    1522:	76 2f       	mov	r23, r22
    1524:	05 c0       	rjmp	.+10     	; 0x1530 <__floatsisf+0x5e>
    1526:	66 23       	and	r22, r22
    1528:	71 f0       	breq	.+28     	; 0x1546 <__floatsisf+0x74>
    152a:	96 e8       	ldi	r25, 0x86	; 134
    152c:	86 2f       	mov	r24, r22
    152e:	70 e0       	ldi	r23, 0x00	; 0
    1530:	60 e0       	ldi	r22, 0x00	; 0
    1532:	2a f0       	brmi	.+10     	; 0x153e <__floatsisf+0x6c>
    1534:	9a 95       	dec	r25
    1536:	66 0f       	add	r22, r22
    1538:	77 1f       	adc	r23, r23
    153a:	88 1f       	adc	r24, r24
    153c:	da f7       	brpl	.-10     	; 0x1534 <__floatsisf+0x62>
    153e:	88 0f       	add	r24, r24
    1540:	96 95       	lsr	r25
    1542:	87 95       	ror	r24
    1544:	97 f9       	bld	r25, 7
    1546:	08 95       	ret

00001548 <__fp_inf>:
    1548:	97 f9       	bld	r25, 7
    154a:	9f 67       	ori	r25, 0x7F	; 127
    154c:	80 e8       	ldi	r24, 0x80	; 128
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	60 e0       	ldi	r22, 0x00	; 0
    1552:	08 95       	ret

00001554 <__fp_nan>:
    1554:	9f ef       	ldi	r25, 0xFF	; 255
    1556:	80 ec       	ldi	r24, 0xC0	; 192
    1558:	08 95       	ret

0000155a <__fp_pscA>:
    155a:	00 24       	eor	r0, r0
    155c:	0a 94       	dec	r0
    155e:	16 16       	cp	r1, r22
    1560:	17 06       	cpc	r1, r23
    1562:	18 06       	cpc	r1, r24
    1564:	09 06       	cpc	r0, r25
    1566:	08 95       	ret

00001568 <__fp_pscB>:
    1568:	00 24       	eor	r0, r0
    156a:	0a 94       	dec	r0
    156c:	12 16       	cp	r1, r18
    156e:	13 06       	cpc	r1, r19
    1570:	14 06       	cpc	r1, r20
    1572:	05 06       	cpc	r0, r21
    1574:	08 95       	ret

00001576 <__fp_round>:
    1576:	09 2e       	mov	r0, r25
    1578:	03 94       	inc	r0
    157a:	00 0c       	add	r0, r0
    157c:	11 f4       	brne	.+4      	; 0x1582 <__fp_round+0xc>
    157e:	88 23       	and	r24, r24
    1580:	52 f0       	brmi	.+20     	; 0x1596 <__fp_round+0x20>
    1582:	bb 0f       	add	r27, r27
    1584:	40 f4       	brcc	.+16     	; 0x1596 <__fp_round+0x20>
    1586:	bf 2b       	or	r27, r31
    1588:	11 f4       	brne	.+4      	; 0x158e <__fp_round+0x18>
    158a:	60 ff       	sbrs	r22, 0
    158c:	04 c0       	rjmp	.+8      	; 0x1596 <__fp_round+0x20>
    158e:	6f 5f       	subi	r22, 0xFF	; 255
    1590:	7f 4f       	sbci	r23, 0xFF	; 255
    1592:	8f 4f       	sbci	r24, 0xFF	; 255
    1594:	9f 4f       	sbci	r25, 0xFF	; 255
    1596:	08 95       	ret

00001598 <__fp_split3>:
    1598:	57 fd       	sbrc	r21, 7
    159a:	90 58       	subi	r25, 0x80	; 128
    159c:	44 0f       	add	r20, r20
    159e:	55 1f       	adc	r21, r21
    15a0:	59 f0       	breq	.+22     	; 0x15b8 <__fp_splitA+0x10>
    15a2:	5f 3f       	cpi	r21, 0xFF	; 255
    15a4:	71 f0       	breq	.+28     	; 0x15c2 <__fp_splitA+0x1a>
    15a6:	47 95       	ror	r20

000015a8 <__fp_splitA>:
    15a8:	88 0f       	add	r24, r24
    15aa:	97 fb       	bst	r25, 7
    15ac:	99 1f       	adc	r25, r25
    15ae:	61 f0       	breq	.+24     	; 0x15c8 <__fp_splitA+0x20>
    15b0:	9f 3f       	cpi	r25, 0xFF	; 255
    15b2:	79 f0       	breq	.+30     	; 0x15d2 <__fp_splitA+0x2a>
    15b4:	87 95       	ror	r24
    15b6:	08 95       	ret
    15b8:	12 16       	cp	r1, r18
    15ba:	13 06       	cpc	r1, r19
    15bc:	14 06       	cpc	r1, r20
    15be:	55 1f       	adc	r21, r21
    15c0:	f2 cf       	rjmp	.-28     	; 0x15a6 <__fp_split3+0xe>
    15c2:	46 95       	lsr	r20
    15c4:	f1 df       	rcall	.-30     	; 0x15a8 <__fp_splitA>
    15c6:	08 c0       	rjmp	.+16     	; 0x15d8 <__fp_splitA+0x30>
    15c8:	16 16       	cp	r1, r22
    15ca:	17 06       	cpc	r1, r23
    15cc:	18 06       	cpc	r1, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	f1 cf       	rjmp	.-30     	; 0x15b4 <__fp_splitA+0xc>
    15d2:	86 95       	lsr	r24
    15d4:	71 05       	cpc	r23, r1
    15d6:	61 05       	cpc	r22, r1
    15d8:	08 94       	sec
    15da:	08 95       	ret

000015dc <__fp_zero>:
    15dc:	e8 94       	clt

000015de <__fp_szero>:
    15de:	bb 27       	eor	r27, r27
    15e0:	66 27       	eor	r22, r22
    15e2:	77 27       	eor	r23, r23
    15e4:	cb 01       	movw	r24, r22
    15e6:	97 f9       	bld	r25, 7
    15e8:	08 95       	ret

000015ea <__mulsf3>:
    15ea:	0e 94 08 0b 	call	0x1610	; 0x1610 <__mulsf3x>
    15ee:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <__fp_round>
    15f2:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fp_pscA>
    15f6:	38 f0       	brcs	.+14     	; 0x1606 <__mulsf3+0x1c>
    15f8:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__fp_pscB>
    15fc:	20 f0       	brcs	.+8      	; 0x1606 <__mulsf3+0x1c>
    15fe:	95 23       	and	r25, r21
    1600:	11 f0       	breq	.+4      	; 0x1606 <__mulsf3+0x1c>
    1602:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__fp_inf>
    1606:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__fp_nan>
    160a:	11 24       	eor	r1, r1
    160c:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__fp_szero>

00001610 <__mulsf3x>:
    1610:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__fp_split3>
    1614:	70 f3       	brcs	.-36     	; 0x15f2 <__mulsf3+0x8>

00001616 <__mulsf3_pse>:
    1616:	95 9f       	mul	r25, r21
    1618:	c1 f3       	breq	.-16     	; 0x160a <__mulsf3+0x20>
    161a:	95 0f       	add	r25, r21
    161c:	50 e0       	ldi	r21, 0x00	; 0
    161e:	55 1f       	adc	r21, r21
    1620:	62 9f       	mul	r22, r18
    1622:	f0 01       	movw	r30, r0
    1624:	72 9f       	mul	r23, r18
    1626:	bb 27       	eor	r27, r27
    1628:	f0 0d       	add	r31, r0
    162a:	b1 1d       	adc	r27, r1
    162c:	63 9f       	mul	r22, r19
    162e:	aa 27       	eor	r26, r26
    1630:	f0 0d       	add	r31, r0
    1632:	b1 1d       	adc	r27, r1
    1634:	aa 1f       	adc	r26, r26
    1636:	64 9f       	mul	r22, r20
    1638:	66 27       	eor	r22, r22
    163a:	b0 0d       	add	r27, r0
    163c:	a1 1d       	adc	r26, r1
    163e:	66 1f       	adc	r22, r22
    1640:	82 9f       	mul	r24, r18
    1642:	22 27       	eor	r18, r18
    1644:	b0 0d       	add	r27, r0
    1646:	a1 1d       	adc	r26, r1
    1648:	62 1f       	adc	r22, r18
    164a:	73 9f       	mul	r23, r19
    164c:	b0 0d       	add	r27, r0
    164e:	a1 1d       	adc	r26, r1
    1650:	62 1f       	adc	r22, r18
    1652:	83 9f       	mul	r24, r19
    1654:	a0 0d       	add	r26, r0
    1656:	61 1d       	adc	r22, r1
    1658:	22 1f       	adc	r18, r18
    165a:	74 9f       	mul	r23, r20
    165c:	33 27       	eor	r19, r19
    165e:	a0 0d       	add	r26, r0
    1660:	61 1d       	adc	r22, r1
    1662:	23 1f       	adc	r18, r19
    1664:	84 9f       	mul	r24, r20
    1666:	60 0d       	add	r22, r0
    1668:	21 1d       	adc	r18, r1
    166a:	82 2f       	mov	r24, r18
    166c:	76 2f       	mov	r23, r22
    166e:	6a 2f       	mov	r22, r26
    1670:	11 24       	eor	r1, r1
    1672:	9f 57       	subi	r25, 0x7F	; 127
    1674:	50 40       	sbci	r21, 0x00	; 0
    1676:	9a f0       	brmi	.+38     	; 0x169e <__mulsf3_pse+0x88>
    1678:	f1 f0       	breq	.+60     	; 0x16b6 <__mulsf3_pse+0xa0>
    167a:	88 23       	and	r24, r24
    167c:	4a f0       	brmi	.+18     	; 0x1690 <__mulsf3_pse+0x7a>
    167e:	ee 0f       	add	r30, r30
    1680:	ff 1f       	adc	r31, r31
    1682:	bb 1f       	adc	r27, r27
    1684:	66 1f       	adc	r22, r22
    1686:	77 1f       	adc	r23, r23
    1688:	88 1f       	adc	r24, r24
    168a:	91 50       	subi	r25, 0x01	; 1
    168c:	50 40       	sbci	r21, 0x00	; 0
    168e:	a9 f7       	brne	.-22     	; 0x167a <__mulsf3_pse+0x64>
    1690:	9e 3f       	cpi	r25, 0xFE	; 254
    1692:	51 05       	cpc	r21, r1
    1694:	80 f0       	brcs	.+32     	; 0x16b6 <__mulsf3_pse+0xa0>
    1696:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__fp_inf>
    169a:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__fp_szero>
    169e:	5f 3f       	cpi	r21, 0xFF	; 255
    16a0:	e4 f3       	brlt	.-8      	; 0x169a <__mulsf3_pse+0x84>
    16a2:	98 3e       	cpi	r25, 0xE8	; 232
    16a4:	d4 f3       	brlt	.-12     	; 0x169a <__mulsf3_pse+0x84>
    16a6:	86 95       	lsr	r24
    16a8:	77 95       	ror	r23
    16aa:	67 95       	ror	r22
    16ac:	b7 95       	ror	r27
    16ae:	f7 95       	ror	r31
    16b0:	e7 95       	ror	r30
    16b2:	9f 5f       	subi	r25, 0xFF	; 255
    16b4:	c1 f7       	brne	.-16     	; 0x16a6 <__mulsf3_pse+0x90>
    16b6:	fe 2b       	or	r31, r30
    16b8:	88 0f       	add	r24, r24
    16ba:	91 1d       	adc	r25, r1
    16bc:	96 95       	lsr	r25
    16be:	87 95       	ror	r24
    16c0:	97 f9       	bld	r25, 7
    16c2:	08 95       	ret

000016c4 <__tablejump2__>:
    16c4:	ee 0f       	add	r30, r30
    16c6:	ff 1f       	adc	r31, r31
    16c8:	05 90       	lpm	r0, Z+
    16ca:	f4 91       	lpm	r31, Z
    16cc:	e0 2d       	mov	r30, r0
    16ce:	09 94       	ijmp

000016d0 <_exit>:
    16d0:	f8 94       	cli

000016d2 <__stop_program>:
    16d2:	ff cf       	rjmp	.-2      	; 0x16d2 <__stop_program>
